// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/protobuf/v2/observations.proto

package org.transmartproject.rest.hypercubeProto;

public final class ObservationsProto {
  private ObservationsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code hypercube.Type}
   */
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DOUBLE = 0;</code>
     */
    DOUBLE(0),
    /**
     * <code>STRING = 1;</code>
     */
    STRING(1),
    /**
     * <code>INT = 2;</code>
     */
    INT(2),
    /**
     * <code>TIMESTAMP = 3;</code>
     */
    TIMESTAMP(3),
    /**
     * <code>OBJECT = 4;</code>
     */
    OBJECT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DOUBLE = 0;</code>
     */
    public static final int DOUBLE_VALUE = 0;
    /**
     * <code>STRING = 1;</code>
     */
    public static final int STRING_VALUE = 1;
    /**
     * <code>INT = 2;</code>
     */
    public static final int INT_VALUE = 2;
    /**
     * <code>TIMESTAMP = 3;</code>
     */
    public static final int TIMESTAMP_VALUE = 3;
    /**
     * <code>OBJECT = 4;</code>
     */
    public static final int OBJECT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Type valueOf(int value) {
      return forNumber(value);
    }

    public static Type forNumber(int value) {
      switch (value) {
        case 0: return DOUBLE;
        case 1: return STRING;
        case 2: return INT;
        case 3: return TIMESTAMP;
        case 4: return OBJECT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Type> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final Type[] VALUES = values();

    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Type(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:hypercube.Type)
  }

  public interface HeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.Header)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration> 
        getDimensionDeclarationsList();
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration getDimensionDeclarations(int index);
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    int getDimensionDeclarationsCount();
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder> 
        getDimensionDeclarationsOrBuilderList();
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder getDimensionDeclarationsOrBuilder(
        int index);

    /**
     * <pre>
     * same meaning as in Observation
     * </pre>
     *
     * <code>optional bool last = 2;</code>
     */
    boolean getLast();

    /**
     * <pre>
     * If an error happens while streaming of the result has already started, this field can be set with the error message.
     * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
     * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
     * that can be detected before writing to the response stream has started will be and will cause an HTTP error
     * to be returned with a textual or json error message in the body.
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    java.lang.String getError();
    /**
     * <pre>
     * If an error happens while streaming of the result has already started, this field can be set with the error message.
     * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
     * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
     * that can be detected before writing to the response stream has started will be and will cause an HTTP error
     * to be returned with a textual or json error message in the body.
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * <pre>
   * header is sent without chunking in a one message
   * </pre>
   *
   * Protobuf type {@code hypercube.Header}
   */
  public  static final class Header extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.Header)
      HeaderOrBuilder {
    // Use Header.newBuilder() to construct.
    private Header(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Header() {
      dimensionDeclarations_ = java.util.Collections.emptyList();
      last_ = false;
      error_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Header(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dimensionDeclarations_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration>();
                mutable_bitField0_ |= 0x00000001;
              }
              dimensionDeclarations_.add(
                  input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.parser(), extensionRegistry));
              break;
            }
            case 16: {

              last_ = input.readBool();
              break;
            }
            case 794: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionDeclarations_ = java.util.Collections.unmodifiableList(dimensionDeclarations_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Header_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Header_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.Header.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Header.Builder.class);
    }

    private int bitField0_;
    public static final int DIMENSIONDECLARATIONS_FIELD_NUMBER = 1;
    private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration> dimensionDeclarations_;
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration> getDimensionDeclarationsList() {
      return dimensionDeclarations_;
    }
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder> 
        getDimensionDeclarationsOrBuilderList() {
      return dimensionDeclarations_;
    }
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    public int getDimensionDeclarationsCount() {
      return dimensionDeclarations_.size();
    }
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration getDimensionDeclarations(int index) {
      return dimensionDeclarations_.get(index);
    }
    /**
     * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder getDimensionDeclarationsOrBuilder(
        int index) {
      return dimensionDeclarations_.get(index);
    }

    public static final int LAST_FIELD_NUMBER = 2;
    private boolean last_;
    /**
     * <pre>
     * same meaning as in Observation
     * </pre>
     *
     * <code>optional bool last = 2;</code>
     */
    public boolean getLast() {
      return last_;
    }

    public static final int ERROR_FIELD_NUMBER = 99;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * If an error happens while streaming of the result has already started, this field can be set with the error message.
     * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
     * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
     * that can be detected before writing to the response stream has started will be and will cause an HTTP error
     * to be returned with a textual or json error message in the body.
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * If an error happens while streaming of the result has already started, this field can be set with the error message.
     * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
     * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
     * that can be detected before writing to the response stream has started will be and will cause an HTTP error
     * to be returned with a textual or json error message in the body.
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dimensionDeclarations_.size(); i++) {
        output.writeMessage(1, dimensionDeclarations_.get(i));
      }
      if (last_ != false) {
        output.writeBool(2, last_);
      }
      if (!getErrorBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 99, error_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dimensionDeclarations_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dimensionDeclarations_.get(i));
      }
      if (last_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, last_);
      }
      if (!getErrorBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(99, error_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Header)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.Header other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Header) obj;

      boolean result = true;
      result = result && getDimensionDeclarationsList()
          .equals(other.getDimensionDeclarationsList());
      result = result && (getLast()
          == other.getLast());
      result = result && getError()
          .equals(other.getError());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getDimensionDeclarationsCount() > 0) {
        hash = (37 * hash) + DIMENSIONDECLARATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getDimensionDeclarationsList().hashCode();
      }
      hash = (37 * hash) + LAST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLast());
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.Header prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * header is sent without chunking in a one message
     * </pre>
     *
     * Protobuf type {@code hypercube.Header}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.Header)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.HeaderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Header_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Header_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.Header.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Header.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.Header.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDimensionDeclarationsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (dimensionDeclarationsBuilder_ == null) {
          dimensionDeclarations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dimensionDeclarationsBuilder_.clear();
        }
        last_ = false;

        error_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Header_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Header getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.Header.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Header build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Header result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Header buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Header result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Header(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (dimensionDeclarationsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            dimensionDeclarations_ = java.util.Collections.unmodifiableList(dimensionDeclarations_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dimensionDeclarations_ = dimensionDeclarations_;
        } else {
          result.dimensionDeclarations_ = dimensionDeclarationsBuilder_.build();
        }
        result.last_ = last_;
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Header) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.Header)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.Header other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.Header.getDefaultInstance()) return this;
        if (dimensionDeclarationsBuilder_ == null) {
          if (!other.dimensionDeclarations_.isEmpty()) {
            if (dimensionDeclarations_.isEmpty()) {
              dimensionDeclarations_ = other.dimensionDeclarations_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDimensionDeclarationsIsMutable();
              dimensionDeclarations_.addAll(other.dimensionDeclarations_);
            }
            onChanged();
          }
        } else {
          if (!other.dimensionDeclarations_.isEmpty()) {
            if (dimensionDeclarationsBuilder_.isEmpty()) {
              dimensionDeclarationsBuilder_.dispose();
              dimensionDeclarationsBuilder_ = null;
              dimensionDeclarations_ = other.dimensionDeclarations_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dimensionDeclarationsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDimensionDeclarationsFieldBuilder() : null;
            } else {
              dimensionDeclarationsBuilder_.addAllMessages(other.dimensionDeclarations_);
            }
          }
        }
        if (other.getLast() != false) {
          setLast(other.getLast());
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Header parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Header) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration> dimensionDeclarations_ =
        java.util.Collections.emptyList();
      private void ensureDimensionDeclarationsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionDeclarations_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration>(dimensionDeclarations_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder> dimensionDeclarationsBuilder_;

      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration> getDimensionDeclarationsList() {
        if (dimensionDeclarationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dimensionDeclarations_);
        } else {
          return dimensionDeclarationsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public int getDimensionDeclarationsCount() {
        if (dimensionDeclarationsBuilder_ == null) {
          return dimensionDeclarations_.size();
        } else {
          return dimensionDeclarationsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration getDimensionDeclarations(int index) {
        if (dimensionDeclarationsBuilder_ == null) {
          return dimensionDeclarations_.get(index);
        } else {
          return dimensionDeclarationsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder setDimensionDeclarations(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration value) {
        if (dimensionDeclarationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDimensionDeclarationsIsMutable();
          dimensionDeclarations_.set(index, value);
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder setDimensionDeclarations(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder builderForValue) {
        if (dimensionDeclarationsBuilder_ == null) {
          ensureDimensionDeclarationsIsMutable();
          dimensionDeclarations_.set(index, builderForValue.build());
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder addDimensionDeclarations(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration value) {
        if (dimensionDeclarationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDimensionDeclarationsIsMutable();
          dimensionDeclarations_.add(value);
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder addDimensionDeclarations(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration value) {
        if (dimensionDeclarationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDimensionDeclarationsIsMutable();
          dimensionDeclarations_.add(index, value);
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder addDimensionDeclarations(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder builderForValue) {
        if (dimensionDeclarationsBuilder_ == null) {
          ensureDimensionDeclarationsIsMutable();
          dimensionDeclarations_.add(builderForValue.build());
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder addDimensionDeclarations(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder builderForValue) {
        if (dimensionDeclarationsBuilder_ == null) {
          ensureDimensionDeclarationsIsMutable();
          dimensionDeclarations_.add(index, builderForValue.build());
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder addAllDimensionDeclarations(
          java.lang.Iterable<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration> values) {
        if (dimensionDeclarationsBuilder_ == null) {
          ensureDimensionDeclarationsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dimensionDeclarations_);
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder clearDimensionDeclarations() {
        if (dimensionDeclarationsBuilder_ == null) {
          dimensionDeclarations_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public Builder removeDimensionDeclarations(int index) {
        if (dimensionDeclarationsBuilder_ == null) {
          ensureDimensionDeclarationsIsMutable();
          dimensionDeclarations_.remove(index);
          onChanged();
        } else {
          dimensionDeclarationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder getDimensionDeclarationsBuilder(
          int index) {
        return getDimensionDeclarationsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder getDimensionDeclarationsOrBuilder(
          int index) {
        if (dimensionDeclarationsBuilder_ == null) {
          return dimensionDeclarations_.get(index);  } else {
          return dimensionDeclarationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder> 
           getDimensionDeclarationsOrBuilderList() {
        if (dimensionDeclarationsBuilder_ != null) {
          return dimensionDeclarationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dimensionDeclarations_);
        }
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder addDimensionDeclarationsBuilder() {
        return getDimensionDeclarationsFieldBuilder().addBuilder(
            org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder addDimensionDeclarationsBuilder(
          int index) {
        return getDimensionDeclarationsFieldBuilder().addBuilder(
            index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.getDefaultInstance());
      }
      /**
       * <code>repeated .hypercube.DimensionDeclaration dimensionDeclarations = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder> 
           getDimensionDeclarationsBuilderList() {
        return getDimensionDeclarationsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder> 
          getDimensionDeclarationsFieldBuilder() {
        if (dimensionDeclarationsBuilder_ == null) {
          dimensionDeclarationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder>(
                  dimensionDeclarations_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          dimensionDeclarations_ = null;
        }
        return dimensionDeclarationsBuilder_;
      }

      private boolean last_ ;
      /**
       * <pre>
       * same meaning as in Observation
       * </pre>
       *
       * <code>optional bool last = 2;</code>
       */
      public boolean getLast() {
        return last_;
      }
      /**
       * <pre>
       * same meaning as in Observation
       * </pre>
       *
       * <code>optional bool last = 2;</code>
       */
      public Builder setLast(boolean value) {
        
        last_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * same meaning as in Observation
       * </pre>
       *
       * <code>optional bool last = 2;</code>
       */
      public Builder clearLast() {
        
        last_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * If an error happens while streaming of the result has already started, this field can be set with the error message.
       * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
       * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
       * that can be detected before writing to the response stream has started will be and will cause an HTTP error
       * to be returned with a textual or json error message in the body.
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If an error happens while streaming of the result has already started, this field can be set with the error message.
       * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
       * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
       * that can be detected before writing to the response stream has started will be and will cause an HTTP error
       * to be returned with a textual or json error message in the body.
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If an error happens while streaming of the result has already started, this field can be set with the error message.
       * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
       * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
       * that can be detected before writing to the response stream has started will be and will cause an HTTP error
       * to be returned with a textual or json error message in the body.
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If an error happens while streaming of the result has already started, this field can be set with the error message.
       * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
       * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
       * that can be detected before writing to the response stream has started will be and will cause an HTTP error
       * to be returned with a textual or json error message in the body.
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If an error happens while streaming of the result has already started, this field can be set with the error message.
       * If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
       * these error fields generally indicates an internal application bug or a database consistency issue. Any errors
       * that can be detected before writing to the response stream has started will be and will cause an HTTP error
       * to be returned with a textual or json error message in the body.
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.Header)
    }

    // @@protoc_insertion_point(class_scope:hypercube.Header)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.Header DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Header();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Header getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Header>
        PARSER = new com.google.protobuf.AbstractParser<Header>() {
      public Header parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Header(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Header> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Header> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Header getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DimensionDeclarationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.DimensionDeclaration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * each dimension present in the output is declared with this message
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * each dimension present in the output is declared with this message
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * A description of the elements of the dimension. 'fields' is only set if type is
     *OBJECT 
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * A description of the elements of the dimension. 'fields' is only set if type is
     *OBJECT 
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.Type getType();

    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition> 
        getFieldsList();
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition getFields(int index);
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    int getFieldsCount();
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder> 
        getFieldsOrBuilderList();
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder getFieldsOrBuilder(
        int index);

    /**
     * <pre>
     * If true, the dimension elements will be stored in the
     *observation cell instead of the footer. 
     * </pre>
     *
     * <code>optional bool inline = 4;</code>
     */
    boolean getInline();

    /**
     * <pre>
     * If true, observations are packed along this dimension. Only one dimension can have
     *this flag set, and this flag is mutually exclusive with the 'inline' flag.
     * </pre>
     *
     * <code>optional bool packed = 5;</code>
     */
    boolean getPacked();

    /**
     * <pre>
     * Only used if the dimension elements are sent in the header instead of the footer. 
     * </pre>
     *
     * <code>optional .hypercube.DimensionElements elements = 6;</code>
     */
    boolean hasElements();
    /**
     * <pre>
     * Only used if the dimension elements are sent in the header instead of the footer. 
     * </pre>
     *
     * <code>optional .hypercube.DimensionElements elements = 6;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getElements();
    /**
     * <pre>
     * Only used if the dimension elements are sent in the header instead of the footer. 
     * </pre>
     *
     * <code>optional .hypercube.DimensionElements elements = 6;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getElementsOrBuilder();
  }
  /**
   * Protobuf type {@code hypercube.DimensionDeclaration}
   */
  public  static final class DimensionDeclaration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.DimensionDeclaration)
      DimensionDeclarationOrBuilder {
    // Use DimensionDeclaration.newBuilder() to construct.
    private DimensionDeclaration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DimensionDeclaration() {
      name_ = "";
      type_ = 0;
      fields_ = java.util.Collections.emptyList();
      inline_ = false;
      packed_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DimensionDeclaration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                fields_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition>();
                mutable_bitField0_ |= 0x00000004;
              }
              fields_.add(
                  input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.parser(), extensionRegistry));
              break;
            }
            case 32: {

              inline_ = input.readBool();
              break;
            }
            case 40: {

              packed_ = input.readBool();
              break;
            }
            case 50: {
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder subBuilder = null;
              if (elements_ != null) {
                subBuilder = elements_.toBuilder();
              }
              elements_ = input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(elements_);
                elements_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          fields_ = java.util.Collections.unmodifiableList(fields_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionDeclaration_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionDeclaration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * each dimension present in the output is declared with this message
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * each dimension present in the output is declared with this message
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <pre>
     * A description of the elements of the dimension. 'fields' is only set if type is
     *OBJECT 
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * A description of the elements of the dimension. 'fields' is only set if type is
     *OBJECT 
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Type getType() {
      org.transmartproject.rest.hypercubeProto.ObservationsProto.Type result = org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.valueOf(type_);
      return result == null ? org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.UNRECOGNIZED : result;
    }

    public static final int FIELDS_FIELD_NUMBER = 3;
    private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition> fields_;
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition> getFieldsList() {
      return fields_;
    }
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder> 
        getFieldsOrBuilderList() {
      return fields_;
    }
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    public int getFieldsCount() {
      return fields_.size();
    }
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition getFields(int index) {
      return fields_.get(index);
    }
    /**
     * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder getFieldsOrBuilder(
        int index) {
      return fields_.get(index);
    }

    public static final int INLINE_FIELD_NUMBER = 4;
    private boolean inline_;
    /**
     * <pre>
     * If true, the dimension elements will be stored in the
     *observation cell instead of the footer. 
     * </pre>
     *
     * <code>optional bool inline = 4;</code>
     */
    public boolean getInline() {
      return inline_;
    }

    public static final int PACKED_FIELD_NUMBER = 5;
    private boolean packed_;
    /**
     * <pre>
     * If true, observations are packed along this dimension. Only one dimension can have
     *this flag set, and this flag is mutually exclusive with the 'inline' flag.
     * </pre>
     *
     * <code>optional bool packed = 5;</code>
     */
    public boolean getPacked() {
      return packed_;
    }

    public static final int ELEMENTS_FIELD_NUMBER = 6;
    private org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements elements_;
    /**
     * <pre>
     * Only used if the dimension elements are sent in the header instead of the footer. 
     * </pre>
     *
     * <code>optional .hypercube.DimensionElements elements = 6;</code>
     */
    public boolean hasElements() {
      return elements_ != null;
    }
    /**
     * <pre>
     * Only used if the dimension elements are sent in the header instead of the footer. 
     * </pre>
     *
     * <code>optional .hypercube.DimensionElements elements = 6;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getElements() {
      return elements_ == null ? org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance() : elements_;
    }
    /**
     * <pre>
     * Only used if the dimension elements are sent in the header instead of the footer. 
     * </pre>
     *
     * <code>optional .hypercube.DimensionElements elements = 6;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getElementsOrBuilder() {
      return getElements();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (type_ != org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.DOUBLE.getNumber()) {
        output.writeEnum(2, type_);
      }
      for (int i = 0; i < fields_.size(); i++) {
        output.writeMessage(3, fields_.get(i));
      }
      if (inline_ != false) {
        output.writeBool(4, inline_);
      }
      if (packed_ != false) {
        output.writeBool(5, packed_);
      }
      if (elements_ != null) {
        output.writeMessage(6, getElements());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (type_ != org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.DOUBLE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      for (int i = 0; i < fields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, fields_.get(i));
      }
      if (inline_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, inline_);
      }
      if (packed_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, packed_);
      }
      if (elements_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getElements());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && type_ == other.type_;
      result = result && getFieldsList()
          .equals(other.getFieldsList());
      result = result && (getInline()
          == other.getInline());
      result = result && (getPacked()
          == other.getPacked());
      result = result && (hasElements() == other.hasElements());
      if (hasElements()) {
        result = result && getElements()
            .equals(other.getElements());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (getFieldsCount() > 0) {
        hash = (37 * hash) + FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getFieldsList().hashCode();
      }
      hash = (37 * hash) + INLINE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getInline());
      hash = (37 * hash) + PACKED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPacked());
      if (hasElements()) {
        hash = (37 * hash) + ELEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getElements().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hypercube.DimensionDeclaration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.DimensionDeclaration)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclarationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionDeclaration_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionDeclaration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFieldsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        type_ = 0;

        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          fieldsBuilder_.clear();
        }
        inline_ = false;

        packed_ = false;

        if (elementsBuilder_ == null) {
          elements_ = null;
        } else {
          elements_ = null;
          elementsBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionDeclaration_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.name_ = name_;
        result.type_ = type_;
        if (fieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            fields_ = java.util.Collections.unmodifiableList(fields_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.fields_ = fields_;
        } else {
          result.fields_ = fieldsBuilder_.build();
        }
        result.inline_ = inline_;
        result.packed_ = packed_;
        if (elementsBuilder_ == null) {
          result.elements_ = elements_;
        } else {
          result.elements_ = elementsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (fieldsBuilder_ == null) {
          if (!other.fields_.isEmpty()) {
            if (fields_.isEmpty()) {
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFieldsIsMutable();
              fields_.addAll(other.fields_);
            }
            onChanged();
          }
        } else {
          if (!other.fields_.isEmpty()) {
            if (fieldsBuilder_.isEmpty()) {
              fieldsBuilder_.dispose();
              fieldsBuilder_ = null;
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000004);
              fieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldsFieldBuilder() : null;
            } else {
              fieldsBuilder_.addAllMessages(other.fields_);
            }
          }
        }
        if (other.getInline() != false) {
          setInline(other.getInline());
        }
        if (other.getPacked() != false) {
          setPacked(other.getPacked());
        }
        if (other.hasElements()) {
          mergeElements(other.getElements());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * each dimension present in the output is declared with this message
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * each dimension present in the output is declared with this message
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * each dimension present in the output is declared with this message
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * each dimension present in the output is declared with this message
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * each dimension present in the output is declared with this message
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * A description of the elements of the dimension. 'fields' is only set if type is
       *OBJECT 
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * A description of the elements of the dimension. 'fields' is only set if type is
       *OBJECT 
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A description of the elements of the dimension. 'fields' is only set if type is
       *OBJECT 
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Type getType() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Type result = org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.valueOf(type_);
        return result == null ? org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * A description of the elements of the dimension. 'fields' is only set if type is
       *OBJECT 
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public Builder setType(org.transmartproject.rest.hypercubeProto.ObservationsProto.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A description of the elements of the dimension. 'fields' is only set if type is
       *OBJECT 
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition> fields_ =
        java.util.Collections.emptyList();
      private void ensureFieldsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          fields_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition>(fields_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder> fieldsBuilder_;

      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition> getFieldsList() {
        if (fieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fields_);
        } else {
          return fieldsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public int getFieldsCount() {
        if (fieldsBuilder_ == null) {
          return fields_.size();
        } else {
          return fieldsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition getFields(int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);
        } else {
          return fieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder setFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.set(index, value);
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder setFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder addFields(org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder addFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(index, value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder addFields(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder addFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder addAllFields(
          java.lang.Iterable<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition> values) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fields_);
          onChanged();
        } else {
          fieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder clearFields() {
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public Builder removeFields(int index) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.remove(index);
          onChanged();
        } else {
          fieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder getFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder getFieldsOrBuilder(
          int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);  } else {
          return fieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder> 
           getFieldsOrBuilderList() {
        if (fieldsBuilder_ != null) {
          return fieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fields_);
        }
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder addFieldsBuilder() {
        return getFieldsFieldBuilder().addBuilder(
            org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.getDefaultInstance());
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder addFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().addBuilder(
            index, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.getDefaultInstance());
      }
      /**
       * <code>repeated .hypercube.FieldDefinition fields = 3;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder> 
           getFieldsBuilderList() {
        return getFieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder> 
          getFieldsFieldBuilder() {
        if (fieldsBuilder_ == null) {
          fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder>(
                  fields_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          fields_ = null;
        }
        return fieldsBuilder_;
      }

      private boolean inline_ ;
      /**
       * <pre>
       * If true, the dimension elements will be stored in the
       *observation cell instead of the footer. 
       * </pre>
       *
       * <code>optional bool inline = 4;</code>
       */
      public boolean getInline() {
        return inline_;
      }
      /**
       * <pre>
       * If true, the dimension elements will be stored in the
       *observation cell instead of the footer. 
       * </pre>
       *
       * <code>optional bool inline = 4;</code>
       */
      public Builder setInline(boolean value) {
        
        inline_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, the dimension elements will be stored in the
       *observation cell instead of the footer. 
       * </pre>
       *
       * <code>optional bool inline = 4;</code>
       */
      public Builder clearInline() {
        
        inline_ = false;
        onChanged();
        return this;
      }

      private boolean packed_ ;
      /**
       * <pre>
       * If true, observations are packed along this dimension. Only one dimension can have
       *this flag set, and this flag is mutually exclusive with the 'inline' flag.
       * </pre>
       *
       * <code>optional bool packed = 5;</code>
       */
      public boolean getPacked() {
        return packed_;
      }
      /**
       * <pre>
       * If true, observations are packed along this dimension. Only one dimension can have
       *this flag set, and this flag is mutually exclusive with the 'inline' flag.
       * </pre>
       *
       * <code>optional bool packed = 5;</code>
       */
      public Builder setPacked(boolean value) {
        
        packed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, observations are packed along this dimension. Only one dimension can have
       *this flag set, and this flag is mutually exclusive with the 'inline' flag.
       * </pre>
       *
       * <code>optional bool packed = 5;</code>
       */
      public Builder clearPacked() {
        
        packed_ = false;
        onChanged();
        return this;
      }

      private org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements elements_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> elementsBuilder_;
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public boolean hasElements() {
        return elementsBuilder_ != null || elements_ != null;
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getElements() {
        if (elementsBuilder_ == null) {
          return elements_ == null ? org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance() : elements_;
        } else {
          return elementsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public Builder setElements(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (elementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          elements_ = value;
          onChanged();
        } else {
          elementsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public Builder setElements(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder builderForValue) {
        if (elementsBuilder_ == null) {
          elements_ = builderForValue.build();
          onChanged();
        } else {
          elementsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public Builder mergeElements(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (elementsBuilder_ == null) {
          if (elements_ != null) {
            elements_ =
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.newBuilder(elements_).mergeFrom(value).buildPartial();
          } else {
            elements_ = value;
          }
          onChanged();
        } else {
          elementsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public Builder clearElements() {
        if (elementsBuilder_ == null) {
          elements_ = null;
          onChanged();
        } else {
          elements_ = null;
          elementsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder getElementsBuilder() {
        
        onChanged();
        return getElementsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getElementsOrBuilder() {
        if (elementsBuilder_ != null) {
          return elementsBuilder_.getMessageOrBuilder();
        } else {
          return elements_ == null ?
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance() : elements_;
        }
      }
      /**
       * <pre>
       * Only used if the dimension elements are sent in the header instead of the footer. 
       * </pre>
       *
       * <code>optional .hypercube.DimensionElements elements = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
          getElementsFieldBuilder() {
        if (elementsBuilder_ == null) {
          elementsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder>(
                  getElements(),
                  getParentForChildren(),
                  isClean());
          elements_ = null;
        }
        return elementsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.DimensionDeclaration)
    }

    // @@protoc_insertion_point(class_scope:hypercube.DimensionDeclaration)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DimensionDeclaration>
        PARSER = new com.google.protobuf.AbstractParser<DimensionDeclaration>() {
      public DimensionDeclaration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DimensionDeclaration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DimensionDeclaration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DimensionDeclaration> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionDeclaration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FieldDefinitionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.FieldDefinition)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
     * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
     * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
     * age, gender, race, etc.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
     * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
     * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
     * age, gender, race, etc.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
     * (Support for nested compound types could be added in the future)
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
     * (Support for nested compound types could be added in the future)
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.Type getType();
  }
  /**
   * Protobuf type {@code hypercube.FieldDefinition}
   */
  public  static final class FieldDefinition extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.FieldDefinition)
      FieldDefinitionOrBuilder {
    // Use FieldDefinition.newBuilder() to construct.
    private FieldDefinition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FieldDefinition() {
      name_ = "";
      type_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FieldDefinition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_FieldDefinition_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_FieldDefinition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
     * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
     * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
     * age, gender, race, etc.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
     * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
     * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
     * age, gender, race, etc.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <pre>
     * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
     * (Support for nested compound types could be added in the future)
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
     * (Support for nested compound types could be added in the future)
     * </pre>
     *
     * <code>optional .hypercube.Type type = 2;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Type getType() {
      org.transmartproject.rest.hypercubeProto.ObservationsProto.Type result = org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.valueOf(type_);
      return result == null ? org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (type_ != org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.DOUBLE.getNumber()) {
        output.writeEnum(2, type_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (type_ != org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.DOUBLE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && type_ == other.type_;
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hypercube.FieldDefinition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.FieldDefinition)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinitionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_FieldDefinition_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_FieldDefinition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        type_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_FieldDefinition_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition(this);
        result.name_ = name_;
        result.type_ = type_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
       * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
       * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
       * age, gender, race, etc.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
       * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
       * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
       * age, gender, race, etc.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
       * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
       * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
       * age, gender, race, etc.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
       * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
       * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
       * age, gender, race, etc.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
       * This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
       * Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
       * age, gender, race, etc.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
       * (Support for nested compound types could be added in the future)
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
       * (Support for nested compound types could be added in the future)
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
       * (Support for nested compound types could be added in the future)
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Type getType() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Type result = org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.valueOf(type_);
        return result == null ? org.transmartproject.rest.hypercubeProto.ObservationsProto.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
       * (Support for nested compound types could be added in the future)
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public Builder setType(org.transmartproject.rest.hypercubeProto.ObservationsProto.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
       * (Support for nested compound types could be added in the future)
       * </pre>
       *
       * <code>optional .hypercube.Type type = 2;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.FieldDefinition)
    }

    // @@protoc_insertion_point(class_scope:hypercube.FieldDefinition)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FieldDefinition>
        PARSER = new com.google.protobuf.AbstractParser<FieldDefinition>() {
      public FieldDefinition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FieldDefinition(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FieldDefinition> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FieldDefinition> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.FieldDefinition getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CellOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.Cell)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
     * dimension along which observations are packed, if packing is used) and follows their
     * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
     * 'not present'.
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    java.util.List<java.lang.Long> getDimensionIndexesList();
    /**
     * <pre>
     * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
     * dimension along which observations are packed, if packing is used) and follows their
     * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
     * 'not present'.
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    int getDimensionIndexesCount();
    /**
     * <pre>
     * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
     * dimension along which observations are packed, if packing is used) and follows their
     * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
     * 'not present'.
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    long getDimensionIndexes(int index);

    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement> 
        getInlineDimensionsList();
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement getInlineDimensions(int index);
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    int getInlineDimensionsCount();
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder> 
        getInlineDimensionsOrBuilderList();
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder getInlineDimensionsOrBuilder(
        int index);

    /**
     * <pre>
     * indexes of absent dimensions (1-based)
     * </pre>
     *
     * <code>repeated int32 absentInlineDimensions = 5;</code>
     */
    java.util.List<java.lang.Integer> getAbsentInlineDimensionsList();
    /**
     * <pre>
     * indexes of absent dimensions (1-based)
     * </pre>
     *
     * <code>repeated int32 absentInlineDimensions = 5;</code>
     */
    int getAbsentInlineDimensionsCount();
    /**
     * <pre>
     * indexes of absent dimensions (1-based)
     * </pre>
     *
     * <code>repeated int32 absentInlineDimensions = 5;</code>
     */
    int getAbsentInlineDimensions(int index);

    /**
     * <code>optional string stringValue = 3;</code>
     */
    java.lang.String getStringValue();
    /**
     * <code>optional string stringValue = 3;</code>
     */
    com.google.protobuf.ByteString
        getStringValueBytes();

    /**
     * <code>optional double numericValue = 4;</code>
     */
    double getNumericValue();

    /**
     * <pre>
     * Set to true on the last observation, the last observation is followed by a footer.
     * </pre>
     *
     * <code>optional bool last = 7;</code>
     */
    boolean getLast();

    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    java.lang.String getError();
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    com.google.protobuf.ByteString
        getErrorBytes();

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.ValueCase getValueCase();
  }
  /**
   * Protobuf type {@code hypercube.Cell}
   */
  public  static final class Cell extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.Cell)
      CellOrBuilder {
    // Use Cell.newBuilder() to construct.
    private Cell(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Cell() {
      dimensionIndexes_ = java.util.Collections.emptyList();
      inlineDimensions_ = java.util.Collections.emptyList();
      absentInlineDimensions_ = java.util.Collections.emptyList();
      last_ = false;
      error_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Cell(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dimensionIndexes_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              dimensionIndexes_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dimensionIndexes_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dimensionIndexes_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                inlineDimensions_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement>();
                mutable_bitField0_ |= 0x00000002;
              }
              inlineDimensions_.add(
                  input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.parser(), extensionRegistry));
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              valueCase_ = 3;
              value_ = s;
              break;
            }
            case 33: {
              valueCase_ = 4;
              value_ = input.readDouble();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                absentInlineDimensions_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              absentInlineDimensions_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                absentInlineDimensions_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                absentInlineDimensions_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {

              last_ = input.readBool();
              break;
            }
            case 794: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionIndexes_ = java.util.Collections.unmodifiableList(dimensionIndexes_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          inlineDimensions_ = java.util.Collections.unmodifiableList(inlineDimensions_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          absentInlineDimensions_ = java.util.Collections.unmodifiableList(absentInlineDimensions_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Cell_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Cell_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.Builder.class);
    }

    private int bitField0_;
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements com.google.protobuf.Internal.EnumLite {
      STRINGVALUE(3),
      NUMERICVALUE(4),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 3: return STRINGVALUE;
          case 4: return NUMERICVALUE;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int DIMENSIONINDEXES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> dimensionIndexes_;
    /**
     * <pre>
     * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
     * dimension along which observations are packed, if packing is used) and follows their
     * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
     * 'not present'.
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getDimensionIndexesList() {
      return dimensionIndexes_;
    }
    /**
     * <pre>
     * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
     * dimension along which observations are packed, if packing is used) and follows their
     * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
     * 'not present'.
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    public int getDimensionIndexesCount() {
      return dimensionIndexes_.size();
    }
    /**
     * <pre>
     * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
     * dimension along which observations are packed, if packing is used) and follows their
     * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
     * 'not present'.
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    public long getDimensionIndexes(int index) {
      return dimensionIndexes_.get(index);
    }
    private int dimensionIndexesMemoizedSerializedSize = -1;

    public static final int INLINEDIMENSIONS_FIELD_NUMBER = 2;
    private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement> inlineDimensions_;
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement> getInlineDimensionsList() {
      return inlineDimensions_;
    }
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder> 
        getInlineDimensionsOrBuilderList() {
      return inlineDimensions_;
    }
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    public int getInlineDimensionsCount() {
      return inlineDimensions_.size();
    }
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement getInlineDimensions(int index) {
      return inlineDimensions_.get(index);
    }
    /**
     * <pre>
     * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder getInlineDimensionsOrBuilder(
        int index) {
      return inlineDimensions_.get(index);
    }

    public static final int ABSENTINLINEDIMENSIONS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> absentInlineDimensions_;
    /**
     * <pre>
     * indexes of absent dimensions (1-based)
     * </pre>
     *
     * <code>repeated int32 absentInlineDimensions = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getAbsentInlineDimensionsList() {
      return absentInlineDimensions_;
    }
    /**
     * <pre>
     * indexes of absent dimensions (1-based)
     * </pre>
     *
     * <code>repeated int32 absentInlineDimensions = 5;</code>
     */
    public int getAbsentInlineDimensionsCount() {
      return absentInlineDimensions_.size();
    }
    /**
     * <pre>
     * indexes of absent dimensions (1-based)
     * </pre>
     *
     * <code>repeated int32 absentInlineDimensions = 5;</code>
     */
    public int getAbsentInlineDimensions(int index) {
      return absentInlineDimensions_.get(index);
    }
    private int absentInlineDimensionsMemoizedSerializedSize = -1;

    public static final int STRINGVALUE_FIELD_NUMBER = 3;
    /**
     * <code>optional string stringValue = 3;</code>
     */
    public java.lang.String getStringValue() {
      java.lang.Object ref = "";
      if (valueCase_ == 3) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (valueCase_ == 3) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string stringValue = 3;</code>
     */
    public com.google.protobuf.ByteString
        getStringValueBytes() {
      java.lang.Object ref = "";
      if (valueCase_ == 3) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (valueCase_ == 3) {
          value_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NUMERICVALUE_FIELD_NUMBER = 4;
    /**
     * <code>optional double numericValue = 4;</code>
     */
    public double getNumericValue() {
      if (valueCase_ == 4) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int LAST_FIELD_NUMBER = 7;
    private boolean last_;
    /**
     * <pre>
     * Set to true on the last observation, the last observation is followed by a footer.
     * </pre>
     *
     * <code>optional bool last = 7;</code>
     */
    public boolean getLast() {
      return last_;
    }

    public static final int ERROR_FIELD_NUMBER = 99;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getDimensionIndexesList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(dimensionIndexesMemoizedSerializedSize);
      }
      for (int i = 0; i < dimensionIndexes_.size(); i++) {
        output.writeInt64NoTag(dimensionIndexes_.get(i));
      }
      for (int i = 0; i < inlineDimensions_.size(); i++) {
        output.writeMessage(2, inlineDimensions_.get(i));
      }
      if (valueCase_ == 3) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, value_);
      }
      if (valueCase_ == 4) {
        output.writeDouble(
            4, (double)((java.lang.Double) value_));
      }
      if (getAbsentInlineDimensionsList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(absentInlineDimensionsMemoizedSerializedSize);
      }
      for (int i = 0; i < absentInlineDimensions_.size(); i++) {
        output.writeInt32NoTag(absentInlineDimensions_.get(i));
      }
      if (last_ != false) {
        output.writeBool(7, last_);
      }
      if (!getErrorBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 99, error_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dimensionIndexes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dimensionIndexes_.get(i));
        }
        size += dataSize;
        if (!getDimensionIndexesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dimensionIndexesMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < inlineDimensions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, inlineDimensions_.get(i));
      }
      if (valueCase_ == 3) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, value_);
      }
      if (valueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              4, (double)((java.lang.Double) value_));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < absentInlineDimensions_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(absentInlineDimensions_.get(i));
        }
        size += dataSize;
        if (!getAbsentInlineDimensionsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        absentInlineDimensionsMemoizedSerializedSize = dataSize;
      }
      if (last_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, last_);
      }
      if (!getErrorBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(99, error_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell) obj;

      boolean result = true;
      result = result && getDimensionIndexesList()
          .equals(other.getDimensionIndexesList());
      result = result && getInlineDimensionsList()
          .equals(other.getInlineDimensionsList());
      result = result && getAbsentInlineDimensionsList()
          .equals(other.getAbsentInlineDimensionsList());
      result = result && (getLast()
          == other.getLast());
      result = result && getError()
          .equals(other.getError());
      result = result && getValueCase().equals(
          other.getValueCase());
      if (!result) return false;
      switch (valueCase_) {
        case 3:
          result = result && getStringValue()
              .equals(other.getStringValue());
          break;
        case 4:
          result = result && (
              java.lang.Double.doubleToLongBits(getNumericValue())
              == java.lang.Double.doubleToLongBits(
                  other.getNumericValue()));
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getDimensionIndexesCount() > 0) {
        hash = (37 * hash) + DIMENSIONINDEXES_FIELD_NUMBER;
        hash = (53 * hash) + getDimensionIndexesList().hashCode();
      }
      if (getInlineDimensionsCount() > 0) {
        hash = (37 * hash) + INLINEDIMENSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getInlineDimensionsList().hashCode();
      }
      if (getAbsentInlineDimensionsCount() > 0) {
        hash = (37 * hash) + ABSENTINLINEDIMENSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getAbsentInlineDimensionsList().hashCode();
      }
      hash = (37 * hash) + LAST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLast());
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      switch (valueCase_) {
        case 3:
          hash = (37 * hash) + STRINGVALUE_FIELD_NUMBER;
          hash = (53 * hash) + getStringValue().hashCode();
          break;
        case 4:
          hash = (37 * hash) + NUMERICVALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getNumericValue()));
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hypercube.Cell}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.Cell)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.CellOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Cell_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Cell_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInlineDimensionsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        dimensionIndexes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (inlineDimensionsBuilder_ == null) {
          inlineDimensions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          inlineDimensionsBuilder_.clear();
        }
        absentInlineDimensions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        last_ = false;

        error_ = "";

        valueCase_ = 0;
        value_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Cell_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionIndexes_ = java.util.Collections.unmodifiableList(dimensionIndexes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dimensionIndexes_ = dimensionIndexes_;
        if (inlineDimensionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            inlineDimensions_ = java.util.Collections.unmodifiableList(inlineDimensions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.inlineDimensions_ = inlineDimensions_;
        } else {
          result.inlineDimensions_ = inlineDimensionsBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          absentInlineDimensions_ = java.util.Collections.unmodifiableList(absentInlineDimensions_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.absentInlineDimensions_ = absentInlineDimensions_;
        if (valueCase_ == 3) {
          result.value_ = value_;
        }
        if (valueCase_ == 4) {
          result.value_ = value_;
        }
        result.last_ = last_;
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell.getDefaultInstance()) return this;
        if (!other.dimensionIndexes_.isEmpty()) {
          if (dimensionIndexes_.isEmpty()) {
            dimensionIndexes_ = other.dimensionIndexes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimensionIndexesIsMutable();
            dimensionIndexes_.addAll(other.dimensionIndexes_);
          }
          onChanged();
        }
        if (inlineDimensionsBuilder_ == null) {
          if (!other.inlineDimensions_.isEmpty()) {
            if (inlineDimensions_.isEmpty()) {
              inlineDimensions_ = other.inlineDimensions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureInlineDimensionsIsMutable();
              inlineDimensions_.addAll(other.inlineDimensions_);
            }
            onChanged();
          }
        } else {
          if (!other.inlineDimensions_.isEmpty()) {
            if (inlineDimensionsBuilder_.isEmpty()) {
              inlineDimensionsBuilder_.dispose();
              inlineDimensionsBuilder_ = null;
              inlineDimensions_ = other.inlineDimensions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              inlineDimensionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInlineDimensionsFieldBuilder() : null;
            } else {
              inlineDimensionsBuilder_.addAllMessages(other.inlineDimensions_);
            }
          }
        }
        if (!other.absentInlineDimensions_.isEmpty()) {
          if (absentInlineDimensions_.isEmpty()) {
            absentInlineDimensions_ = other.absentInlineDimensions_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureAbsentInlineDimensionsIsMutable();
            absentInlineDimensions_.addAll(other.absentInlineDimensions_);
          }
          onChanged();
        }
        if (other.getLast() != false) {
          setLast(other.getLast());
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        switch (other.getValueCase()) {
          case STRINGVALUE: {
            valueCase_ = 3;
            value_ = other.value_;
            onChanged();
            break;
          }
          case NUMERICVALUE: {
            setNumericValue(other.getNumericValue());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.util.List<java.lang.Long> dimensionIndexes_ = java.util.Collections.emptyList();
      private void ensureDimensionIndexesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionIndexes_ = new java.util.ArrayList<java.lang.Long>(dimensionIndexes_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
       * dimension along which observations are packed, if packing is used) and follows their
       * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
       * 'not present'.
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getDimensionIndexesList() {
        return java.util.Collections.unmodifiableList(dimensionIndexes_);
      }
      /**
       * <pre>
       * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
       * dimension along which observations are packed, if packing is used) and follows their
       * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
       * 'not present'.
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public int getDimensionIndexesCount() {
        return dimensionIndexes_.size();
      }
      /**
       * <pre>
       * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
       * dimension along which observations are packed, if packing is used) and follows their
       * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
       * 'not present'.
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public long getDimensionIndexes(int index) {
        return dimensionIndexes_.get(index);
      }
      /**
       * <pre>
       * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
       * dimension along which observations are packed, if packing is used) and follows their
       * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
       * 'not present'.
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder setDimensionIndexes(
          int index, long value) {
        ensureDimensionIndexesIsMutable();
        dimensionIndexes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
       * dimension along which observations are packed, if packing is used) and follows their
       * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
       * 'not present'.
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder addDimensionIndexes(long value) {
        ensureDimensionIndexesIsMutable();
        dimensionIndexes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
       * dimension along which observations are packed, if packing is used) and follows their
       * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
       * 'not present'.
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder addAllDimensionIndexes(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimensionIndexesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dimensionIndexes_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
       * dimension along which observations are packed, if packing is used) and follows their
       * order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
       * 'not present'.
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder clearDimensionIndexes() {
        dimensionIndexes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement> inlineDimensions_ =
        java.util.Collections.emptyList();
      private void ensureInlineDimensionsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          inlineDimensions_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement>(inlineDimensions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder> inlineDimensionsBuilder_;

      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement> getInlineDimensionsList() {
        if (inlineDimensionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inlineDimensions_);
        } else {
          return inlineDimensionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public int getInlineDimensionsCount() {
        if (inlineDimensionsBuilder_ == null) {
          return inlineDimensions_.size();
        } else {
          return inlineDimensionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement getInlineDimensions(int index) {
        if (inlineDimensionsBuilder_ == null) {
          return inlineDimensions_.get(index);
        } else {
          return inlineDimensionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder setInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement value) {
        if (inlineDimensionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.set(index, value);
          onChanged();
        } else {
          inlineDimensionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder setInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder builderForValue) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.set(index, builderForValue.build());
          onChanged();
        } else {
          inlineDimensionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement value) {
        if (inlineDimensionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(value);
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement value) {
        if (inlineDimensionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(index, value);
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder builderForValue) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(builderForValue.build());
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder builderForValue) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(index, builderForValue.build());
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder addAllInlineDimensions(
          java.lang.Iterable<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement> values) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inlineDimensions_);
          onChanged();
        } else {
          inlineDimensionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder clearInlineDimensions() {
        if (inlineDimensionsBuilder_ == null) {
          inlineDimensions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          inlineDimensionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public Builder removeInlineDimensions(int index) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.remove(index);
          onChanged();
        } else {
          inlineDimensionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder getInlineDimensionsBuilder(
          int index) {
        return getInlineDimensionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder getInlineDimensionsOrBuilder(
          int index) {
        if (inlineDimensionsBuilder_ == null) {
          return inlineDimensions_.get(index);  } else {
          return inlineDimensionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder> 
           getInlineDimensionsOrBuilderList() {
        if (inlineDimensionsBuilder_ != null) {
          return inlineDimensionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inlineDimensions_);
        }
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder addInlineDimensionsBuilder() {
        return getInlineDimensionsFieldBuilder().addBuilder(
            org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.getDefaultInstance());
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder addInlineDimensionsBuilder(
          int index) {
        return getInlineDimensionsFieldBuilder().addBuilder(
            index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.getDefaultInstance());
      }
      /**
       * <pre>
       * A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElement inlineDimensions = 2;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder> 
           getInlineDimensionsBuilderList() {
        return getInlineDimensionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder> 
          getInlineDimensionsFieldBuilder() {
        if (inlineDimensionsBuilder_ == null) {
          inlineDimensionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder>(
                  inlineDimensions_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          inlineDimensions_ = null;
        }
        return inlineDimensionsBuilder_;
      }

      private java.util.List<java.lang.Integer> absentInlineDimensions_ = java.util.Collections.emptyList();
      private void ensureAbsentInlineDimensionsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          absentInlineDimensions_ = new java.util.ArrayList<java.lang.Integer>(absentInlineDimensions_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * indexes of absent dimensions (1-based)
       * </pre>
       *
       * <code>repeated int32 absentInlineDimensions = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getAbsentInlineDimensionsList() {
        return java.util.Collections.unmodifiableList(absentInlineDimensions_);
      }
      /**
       * <pre>
       * indexes of absent dimensions (1-based)
       * </pre>
       *
       * <code>repeated int32 absentInlineDimensions = 5;</code>
       */
      public int getAbsentInlineDimensionsCount() {
        return absentInlineDimensions_.size();
      }
      /**
       * <pre>
       * indexes of absent dimensions (1-based)
       * </pre>
       *
       * <code>repeated int32 absentInlineDimensions = 5;</code>
       */
      public int getAbsentInlineDimensions(int index) {
        return absentInlineDimensions_.get(index);
      }
      /**
       * <pre>
       * indexes of absent dimensions (1-based)
       * </pre>
       *
       * <code>repeated int32 absentInlineDimensions = 5;</code>
       */
      public Builder setAbsentInlineDimensions(
          int index, int value) {
        ensureAbsentInlineDimensionsIsMutable();
        absentInlineDimensions_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * indexes of absent dimensions (1-based)
       * </pre>
       *
       * <code>repeated int32 absentInlineDimensions = 5;</code>
       */
      public Builder addAbsentInlineDimensions(int value) {
        ensureAbsentInlineDimensionsIsMutable();
        absentInlineDimensions_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * indexes of absent dimensions (1-based)
       * </pre>
       *
       * <code>repeated int32 absentInlineDimensions = 5;</code>
       */
      public Builder addAllAbsentInlineDimensions(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAbsentInlineDimensionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, absentInlineDimensions_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * indexes of absent dimensions (1-based)
       * </pre>
       *
       * <code>repeated int32 absentInlineDimensions = 5;</code>
       */
      public Builder clearAbsentInlineDimensions() {
        absentInlineDimensions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      /**
       * <code>optional string stringValue = 3;</code>
       */
      public java.lang.String getStringValue() {
        java.lang.Object ref = "";
        if (valueCase_ == 3) {
          ref = value_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (valueCase_ == 3) {
            value_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string stringValue = 3;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes() {
        java.lang.Object ref = "";
        if (valueCase_ == 3) {
          ref = value_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (valueCase_ == 3) {
            value_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string stringValue = 3;</code>
       */
      public Builder setStringValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string stringValue = 3;</code>
       */
      public Builder clearStringValue() {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional string stringValue = 3;</code>
       */
      public Builder setStringValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>optional double numericValue = 4;</code>
       */
      public double getNumericValue() {
        if (valueCase_ == 4) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>optional double numericValue = 4;</code>
       */
      public Builder setNumericValue(double value) {
        valueCase_ = 4;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double numericValue = 4;</code>
       */
      public Builder clearNumericValue() {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      private boolean last_ ;
      /**
       * <pre>
       * Set to true on the last observation, the last observation is followed by a footer.
       * </pre>
       *
       * <code>optional bool last = 7;</code>
       */
      public boolean getLast() {
        return last_;
      }
      /**
       * <pre>
       * Set to true on the last observation, the last observation is followed by a footer.
       * </pre>
       *
       * <code>optional bool last = 7;</code>
       */
      public Builder setLast(boolean value) {
        
        last_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true on the last observation, the last observation is followed by a footer.
       * </pre>
       *
       * <code>optional bool last = 7;</code>
       */
      public Builder clearLast() {
        
        last_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.Cell)
    }

    // @@protoc_insertion_point(class_scope:hypercube.Cell)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Cell>
        PARSER = new com.google.protobuf.AbstractParser<Cell>() {
      public Cell parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Cell(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Cell> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Cell> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Cell getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PackedCellOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.PackedCell)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * same as in observation
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    java.util.List<java.lang.Long> getDimensionIndexesList();
    /**
     * <pre>
     * same as in observation
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    int getDimensionIndexesCount();
    /**
     * <pre>
     * same as in observation
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    long getDimensionIndexes(int index);

    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> 
        getInlineDimensionsList();
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getInlineDimensions(int index);
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    int getInlineDimensionsCount();
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
        getInlineDimensionsOrBuilderList();
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getInlineDimensionsOrBuilder(
        int index);

    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    java.util.List<java.lang.String>
        getStringValuesList();
    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    int getStringValuesCount();
    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    java.lang.String getStringValues(int index);
    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    com.google.protobuf.ByteString
        getStringValuesBytes(int index);

    /**
     * <code>repeated double numericValues = 4;</code>
     */
    java.util.List<java.lang.Double> getNumericValuesList();
    /**
     * <code>repeated double numericValues = 4;</code>
     */
    int getNumericValuesCount();
    /**
     * <code>repeated double numericValues = 4;</code>
     */
    double getNumericValues(int index);

    /**
     * <pre>
     * The number of values for which the packed dimension is null. These are prepended to the list of values.
     * </pre>
     *
     * <code>optional int32 nullElementCount = 8;</code>
     */
    int getNullElementCount();

    /**
     * <pre>
     * Only one of these must be present.
     * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
     * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
     * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
     * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
     * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
     * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
     * This field is 1-based.
     * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
     * In either case the stringValues or numericValues contain all the values that are present concatenated together
     * in order.
     * </pre>
     *
     * <code>repeated int32 sampleCounts = 5;</code>
     */
    java.util.List<java.lang.Integer> getSampleCountsList();
    /**
     * <pre>
     * Only one of these must be present.
     * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
     * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
     * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
     * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
     * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
     * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
     * This field is 1-based.
     * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
     * In either case the stringValues or numericValues contain all the values that are present concatenated together
     * in order.
     * </pre>
     *
     * <code>repeated int32 sampleCounts = 5;</code>
     */
    int getSampleCountsCount();
    /**
     * <pre>
     * Only one of these must be present.
     * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
     * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
     * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
     * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
     * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
     * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
     * This field is 1-based.
     * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
     * In either case the stringValues or numericValues contain all the values that are present concatenated together
     * in order.
     * </pre>
     *
     * <code>repeated int32 sampleCounts = 5;</code>
     */
    int getSampleCounts(int index);

    /**
     * <code>repeated int32 absentValues = 6;</code>
     */
    java.util.List<java.lang.Integer> getAbsentValuesList();
    /**
     * <code>repeated int32 absentValues = 6;</code>
     */
    int getAbsentValuesCount();
    /**
     * <code>repeated int32 absentValues = 6;</code>
     */
    int getAbsentValues(int index);

    /**
     * <pre>
     * default: false
     * </pre>
     *
     * <code>optional bool last = 7;</code>
     */
    boolean getLast();

    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    java.lang.String getError();
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * Protobuf type {@code hypercube.PackedCell}
   */
  public  static final class PackedCell extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.PackedCell)
      PackedCellOrBuilder {
    // Use PackedCell.newBuilder() to construct.
    private PackedCell(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PackedCell() {
      dimensionIndexes_ = java.util.Collections.emptyList();
      inlineDimensions_ = java.util.Collections.emptyList();
      stringValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      numericValues_ = java.util.Collections.emptyList();
      nullElementCount_ = 0;
      sampleCounts_ = java.util.Collections.emptyList();
      absentValues_ = java.util.Collections.emptyList();
      last_ = false;
      error_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private PackedCell(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dimensionIndexes_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              dimensionIndexes_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                dimensionIndexes_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dimensionIndexes_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                inlineDimensions_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements>();
                mutable_bitField0_ |= 0x00000002;
              }
              inlineDimensions_.add(
                  input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.parser(), extensionRegistry));
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                stringValues_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              stringValues_.add(s);
              break;
            }
            case 33: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                numericValues_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000008;
              }
              numericValues_.add(input.readDouble());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                numericValues_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                numericValues_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                sampleCounts_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              sampleCounts_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                sampleCounts_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                sampleCounts_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                absentValues_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              absentValues_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                absentValues_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                absentValues_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {

              last_ = input.readBool();
              break;
            }
            case 64: {

              nullElementCount_ = input.readInt32();
              break;
            }
            case 794: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionIndexes_ = java.util.Collections.unmodifiableList(dimensionIndexes_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          inlineDimensions_ = java.util.Collections.unmodifiableList(inlineDimensions_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          stringValues_ = stringValues_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          numericValues_ = java.util.Collections.unmodifiableList(numericValues_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          sampleCounts_ = java.util.Collections.unmodifiableList(sampleCounts_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          absentValues_ = java.util.Collections.unmodifiableList(absentValues_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_PackedCell_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_PackedCell_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell.Builder.class);
    }

    private int bitField0_;
    public static final int DIMENSIONINDEXES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> dimensionIndexes_;
    /**
     * <pre>
     * same as in observation
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getDimensionIndexesList() {
      return dimensionIndexes_;
    }
    /**
     * <pre>
     * same as in observation
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    public int getDimensionIndexesCount() {
      return dimensionIndexes_.size();
    }
    /**
     * <pre>
     * same as in observation
     * </pre>
     *
     * <code>repeated int64 dimensionIndexes = 1;</code>
     */
    public long getDimensionIndexes(int index) {
      return dimensionIndexes_.get(index);
    }
    private int dimensionIndexesMemoizedSerializedSize = -1;

    public static final int INLINEDIMENSIONS_FIELD_NUMBER = 2;
    private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> inlineDimensions_;
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> getInlineDimensionsList() {
      return inlineDimensions_;
    }
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
        getInlineDimensionsOrBuilderList() {
      return inlineDimensions_;
    }
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    public int getInlineDimensionsCount() {
      return inlineDimensions_.size();
    }
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getInlineDimensions(int index) {
      return inlineDimensions_.get(index);
    }
    /**
     * <pre>
     * A dimension element for each observation for each inline dimension
     * The perSample flag indicates if there is one element for each sample, or only one element for each group of
     * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
     * can be multiple samples per patient).
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getInlineDimensionsOrBuilder(
        int index) {
      return inlineDimensions_.get(index);
    }

    public static final int STRINGVALUES_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList stringValues_;
    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getStringValuesList() {
      return stringValues_;
    }
    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    public int getStringValuesCount() {
      return stringValues_.size();
    }
    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    public java.lang.String getStringValues(int index) {
      return stringValues_.get(index);
    }
    /**
     * <pre>
     * Only one of these must be set
     * This list are the observation values. If there are multiple samples this list can be longer than the number of
     * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
     * the number of which is indicated by the nullElementCount value.
     * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
     * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
     * not accounted for values are absent.
     * </pre>
     *
     * <code>repeated string stringValues = 3;</code>
     */
    public com.google.protobuf.ByteString
        getStringValuesBytes(int index) {
      return stringValues_.getByteString(index);
    }

    public static final int NUMERICVALUES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Double> numericValues_;
    /**
     * <code>repeated double numericValues = 4;</code>
     */
    public java.util.List<java.lang.Double>
        getNumericValuesList() {
      return numericValues_;
    }
    /**
     * <code>repeated double numericValues = 4;</code>
     */
    public int getNumericValuesCount() {
      return numericValues_.size();
    }
    /**
     * <code>repeated double numericValues = 4;</code>
     */
    public double getNumericValues(int index) {
      return numericValues_.get(index);
    }
    private int numericValuesMemoizedSerializedSize = -1;

    public static final int NULLELEMENTCOUNT_FIELD_NUMBER = 8;
    private int nullElementCount_;
    /**
     * <pre>
     * The number of values for which the packed dimension is null. These are prepended to the list of values.
     * </pre>
     *
     * <code>optional int32 nullElementCount = 8;</code>
     */
    public int getNullElementCount() {
      return nullElementCount_;
    }

    public static final int SAMPLECOUNTS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> sampleCounts_;
    /**
     * <pre>
     * Only one of these must be present.
     * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
     * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
     * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
     * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
     * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
     * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
     * This field is 1-based.
     * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
     * In either case the stringValues or numericValues contain all the values that are present concatenated together
     * in order.
     * </pre>
     *
     * <code>repeated int32 sampleCounts = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getSampleCountsList() {
      return sampleCounts_;
    }
    /**
     * <pre>
     * Only one of these must be present.
     * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
     * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
     * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
     * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
     * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
     * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
     * This field is 1-based.
     * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
     * In either case the stringValues or numericValues contain all the values that are present concatenated together
     * in order.
     * </pre>
     *
     * <code>repeated int32 sampleCounts = 5;</code>
     */
    public int getSampleCountsCount() {
      return sampleCounts_.size();
    }
    /**
     * <pre>
     * Only one of these must be present.
     * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
     * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
     * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
     * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
     * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
     * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
     * This field is 1-based.
     * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
     * In either case the stringValues or numericValues contain all the values that are present concatenated together
     * in order.
     * </pre>
     *
     * <code>repeated int32 sampleCounts = 5;</code>
     */
    public int getSampleCounts(int index) {
      return sampleCounts_.get(index);
    }
    private int sampleCountsMemoizedSerializedSize = -1;

    public static final int ABSENTVALUES_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> absentValues_;
    /**
     * <code>repeated int32 absentValues = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getAbsentValuesList() {
      return absentValues_;
    }
    /**
     * <code>repeated int32 absentValues = 6;</code>
     */
    public int getAbsentValuesCount() {
      return absentValues_.size();
    }
    /**
     * <code>repeated int32 absentValues = 6;</code>
     */
    public int getAbsentValues(int index) {
      return absentValues_.get(index);
    }
    private int absentValuesMemoizedSerializedSize = -1;

    public static final int LAST_FIELD_NUMBER = 7;
    private boolean last_;
    /**
     * <pre>
     * default: false
     * </pre>
     *
     * <code>optional bool last = 7;</code>
     */
    public boolean getLast() {
      return last_;
    }

    public static final int ERROR_FIELD_NUMBER = 99;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getDimensionIndexesList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(dimensionIndexesMemoizedSerializedSize);
      }
      for (int i = 0; i < dimensionIndexes_.size(); i++) {
        output.writeInt64NoTag(dimensionIndexes_.get(i));
      }
      for (int i = 0; i < inlineDimensions_.size(); i++) {
        output.writeMessage(2, inlineDimensions_.get(i));
      }
      for (int i = 0; i < stringValues_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, stringValues_.getRaw(i));
      }
      if (getNumericValuesList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(numericValuesMemoizedSerializedSize);
      }
      for (int i = 0; i < numericValues_.size(); i++) {
        output.writeDoubleNoTag(numericValues_.get(i));
      }
      if (getSampleCountsList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(sampleCountsMemoizedSerializedSize);
      }
      for (int i = 0; i < sampleCounts_.size(); i++) {
        output.writeInt32NoTag(sampleCounts_.get(i));
      }
      if (getAbsentValuesList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(absentValuesMemoizedSerializedSize);
      }
      for (int i = 0; i < absentValues_.size(); i++) {
        output.writeInt32NoTag(absentValues_.get(i));
      }
      if (last_ != false) {
        output.writeBool(7, last_);
      }
      if (nullElementCount_ != 0) {
        output.writeInt32(8, nullElementCount_);
      }
      if (!getErrorBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 99, error_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < dimensionIndexes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(dimensionIndexes_.get(i));
        }
        size += dataSize;
        if (!getDimensionIndexesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dimensionIndexesMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < inlineDimensions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, inlineDimensions_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringValues_.size(); i++) {
          dataSize += computeStringSizeNoTag(stringValues_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringValuesList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getNumericValuesList().size();
        size += dataSize;
        if (!getNumericValuesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        numericValuesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sampleCounts_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sampleCounts_.get(i));
        }
        size += dataSize;
        if (!getSampleCountsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        sampleCountsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < absentValues_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(absentValues_.get(i));
        }
        size += dataSize;
        if (!getAbsentValuesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        absentValuesMemoizedSerializedSize = dataSize;
      }
      if (last_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, last_);
      }
      if (nullElementCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, nullElementCount_);
      }
      if (!getErrorBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(99, error_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell) obj;

      boolean result = true;
      result = result && getDimensionIndexesList()
          .equals(other.getDimensionIndexesList());
      result = result && getInlineDimensionsList()
          .equals(other.getInlineDimensionsList());
      result = result && getStringValuesList()
          .equals(other.getStringValuesList());
      result = result && getNumericValuesList()
          .equals(other.getNumericValuesList());
      result = result && (getNullElementCount()
          == other.getNullElementCount());
      result = result && getSampleCountsList()
          .equals(other.getSampleCountsList());
      result = result && getAbsentValuesList()
          .equals(other.getAbsentValuesList());
      result = result && (getLast()
          == other.getLast());
      result = result && getError()
          .equals(other.getError());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getDimensionIndexesCount() > 0) {
        hash = (37 * hash) + DIMENSIONINDEXES_FIELD_NUMBER;
        hash = (53 * hash) + getDimensionIndexesList().hashCode();
      }
      if (getInlineDimensionsCount() > 0) {
        hash = (37 * hash) + INLINEDIMENSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getInlineDimensionsList().hashCode();
      }
      if (getStringValuesCount() > 0) {
        hash = (37 * hash) + STRINGVALUES_FIELD_NUMBER;
        hash = (53 * hash) + getStringValuesList().hashCode();
      }
      if (getNumericValuesCount() > 0) {
        hash = (37 * hash) + NUMERICVALUES_FIELD_NUMBER;
        hash = (53 * hash) + getNumericValuesList().hashCode();
      }
      hash = (37 * hash) + NULLELEMENTCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getNullElementCount();
      if (getSampleCountsCount() > 0) {
        hash = (37 * hash) + SAMPLECOUNTS_FIELD_NUMBER;
        hash = (53 * hash) + getSampleCountsList().hashCode();
      }
      if (getAbsentValuesCount() > 0) {
        hash = (37 * hash) + ABSENTVALUES_FIELD_NUMBER;
        hash = (53 * hash) + getAbsentValuesList().hashCode();
      }
      hash = (37 * hash) + LAST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLast());
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hypercube.PackedCell}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.PackedCell)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCellOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_PackedCell_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_PackedCell_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInlineDimensionsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        dimensionIndexes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (inlineDimensionsBuilder_ == null) {
          inlineDimensions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          inlineDimensionsBuilder_.clear();
        }
        stringValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        numericValues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        nullElementCount_ = 0;

        sampleCounts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        absentValues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        last_ = false;

        error_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_PackedCell_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionIndexes_ = java.util.Collections.unmodifiableList(dimensionIndexes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dimensionIndexes_ = dimensionIndexes_;
        if (inlineDimensionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            inlineDimensions_ = java.util.Collections.unmodifiableList(inlineDimensions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.inlineDimensions_ = inlineDimensions_;
        } else {
          result.inlineDimensions_ = inlineDimensionsBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          stringValues_ = stringValues_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.stringValues_ = stringValues_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          numericValues_ = java.util.Collections.unmodifiableList(numericValues_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.numericValues_ = numericValues_;
        result.nullElementCount_ = nullElementCount_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          sampleCounts_ = java.util.Collections.unmodifiableList(sampleCounts_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.sampleCounts_ = sampleCounts_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          absentValues_ = java.util.Collections.unmodifiableList(absentValues_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.absentValues_ = absentValues_;
        result.last_ = last_;
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell.getDefaultInstance()) return this;
        if (!other.dimensionIndexes_.isEmpty()) {
          if (dimensionIndexes_.isEmpty()) {
            dimensionIndexes_ = other.dimensionIndexes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDimensionIndexesIsMutable();
            dimensionIndexes_.addAll(other.dimensionIndexes_);
          }
          onChanged();
        }
        if (inlineDimensionsBuilder_ == null) {
          if (!other.inlineDimensions_.isEmpty()) {
            if (inlineDimensions_.isEmpty()) {
              inlineDimensions_ = other.inlineDimensions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureInlineDimensionsIsMutable();
              inlineDimensions_.addAll(other.inlineDimensions_);
            }
            onChanged();
          }
        } else {
          if (!other.inlineDimensions_.isEmpty()) {
            if (inlineDimensionsBuilder_.isEmpty()) {
              inlineDimensionsBuilder_.dispose();
              inlineDimensionsBuilder_ = null;
              inlineDimensions_ = other.inlineDimensions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              inlineDimensionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInlineDimensionsFieldBuilder() : null;
            } else {
              inlineDimensionsBuilder_.addAllMessages(other.inlineDimensions_);
            }
          }
        }
        if (!other.stringValues_.isEmpty()) {
          if (stringValues_.isEmpty()) {
            stringValues_ = other.stringValues_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStringValuesIsMutable();
            stringValues_.addAll(other.stringValues_);
          }
          onChanged();
        }
        if (!other.numericValues_.isEmpty()) {
          if (numericValues_.isEmpty()) {
            numericValues_ = other.numericValues_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureNumericValuesIsMutable();
            numericValues_.addAll(other.numericValues_);
          }
          onChanged();
        }
        if (other.getNullElementCount() != 0) {
          setNullElementCount(other.getNullElementCount());
        }
        if (!other.sampleCounts_.isEmpty()) {
          if (sampleCounts_.isEmpty()) {
            sampleCounts_ = other.sampleCounts_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureSampleCountsIsMutable();
            sampleCounts_.addAll(other.sampleCounts_);
          }
          onChanged();
        }
        if (!other.absentValues_.isEmpty()) {
          if (absentValues_.isEmpty()) {
            absentValues_ = other.absentValues_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureAbsentValuesIsMutable();
            absentValues_.addAll(other.absentValues_);
          }
          onChanged();
        }
        if (other.getLast() != false) {
          setLast(other.getLast());
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Long> dimensionIndexes_ = java.util.Collections.emptyList();
      private void ensureDimensionIndexesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dimensionIndexes_ = new java.util.ArrayList<java.lang.Long>(dimensionIndexes_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * same as in observation
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getDimensionIndexesList() {
        return java.util.Collections.unmodifiableList(dimensionIndexes_);
      }
      /**
       * <pre>
       * same as in observation
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public int getDimensionIndexesCount() {
        return dimensionIndexes_.size();
      }
      /**
       * <pre>
       * same as in observation
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public long getDimensionIndexes(int index) {
        return dimensionIndexes_.get(index);
      }
      /**
       * <pre>
       * same as in observation
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder setDimensionIndexes(
          int index, long value) {
        ensureDimensionIndexesIsMutable();
        dimensionIndexes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * same as in observation
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder addDimensionIndexes(long value) {
        ensureDimensionIndexesIsMutable();
        dimensionIndexes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * same as in observation
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder addAllDimensionIndexes(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureDimensionIndexesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dimensionIndexes_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * same as in observation
       * </pre>
       *
       * <code>repeated int64 dimensionIndexes = 1;</code>
       */
      public Builder clearDimensionIndexes() {
        dimensionIndexes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> inlineDimensions_ =
        java.util.Collections.emptyList();
      private void ensureInlineDimensionsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          inlineDimensions_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements>(inlineDimensions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> inlineDimensionsBuilder_;

      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> getInlineDimensionsList() {
        if (inlineDimensionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inlineDimensions_);
        } else {
          return inlineDimensionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public int getInlineDimensionsCount() {
        if (inlineDimensionsBuilder_ == null) {
          return inlineDimensions_.size();
        } else {
          return inlineDimensionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getInlineDimensions(int index) {
        if (inlineDimensionsBuilder_ == null) {
          return inlineDimensions_.get(index);
        } else {
          return inlineDimensionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder setInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (inlineDimensionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.set(index, value);
          onChanged();
        } else {
          inlineDimensionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder setInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder builderForValue) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.set(index, builderForValue.build());
          onChanged();
        } else {
          inlineDimensionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (inlineDimensionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(value);
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (inlineDimensionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(index, value);
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder builderForValue) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(builderForValue.build());
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder addInlineDimensions(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder builderForValue) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.add(index, builderForValue.build());
          onChanged();
        } else {
          inlineDimensionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder addAllInlineDimensions(
          java.lang.Iterable<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> values) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inlineDimensions_);
          onChanged();
        } else {
          inlineDimensionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder clearInlineDimensions() {
        if (inlineDimensionsBuilder_ == null) {
          inlineDimensions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          inlineDimensionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public Builder removeInlineDimensions(int index) {
        if (inlineDimensionsBuilder_ == null) {
          ensureInlineDimensionsIsMutable();
          inlineDimensions_.remove(index);
          onChanged();
        } else {
          inlineDimensionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder getInlineDimensionsBuilder(
          int index) {
        return getInlineDimensionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getInlineDimensionsOrBuilder(
          int index) {
        if (inlineDimensionsBuilder_ == null) {
          return inlineDimensions_.get(index);  } else {
          return inlineDimensionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
           getInlineDimensionsOrBuilderList() {
        if (inlineDimensionsBuilder_ != null) {
          return inlineDimensionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inlineDimensions_);
        }
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder addInlineDimensionsBuilder() {
        return getInlineDimensionsFieldBuilder().addBuilder(
            org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance());
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder addInlineDimensionsBuilder(
          int index) {
        return getInlineDimensionsFieldBuilder().addBuilder(
            index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance());
      }
      /**
       * <pre>
       * A dimension element for each observation for each inline dimension
       * The perSample flag indicates if there is one element for each sample, or only one element for each group of
       * samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
       * can be multiple samples per patient).
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements inlineDimensions = 2;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder> 
           getInlineDimensionsBuilderList() {
        return getInlineDimensionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
          getInlineDimensionsFieldBuilder() {
        if (inlineDimensionsBuilder_ == null) {
          inlineDimensionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder>(
                  inlineDimensions_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          inlineDimensions_ = null;
        }
        return inlineDimensionsBuilder_;
      }

      private com.google.protobuf.LazyStringList stringValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringValuesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          stringValues_ = new com.google.protobuf.LazyStringArrayList(stringValues_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getStringValuesList() {
        return stringValues_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public int getStringValuesCount() {
        return stringValues_.size();
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public java.lang.String getStringValues(int index) {
        return stringValues_.get(index);
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public com.google.protobuf.ByteString
          getStringValuesBytes(int index) {
        return stringValues_.getByteString(index);
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public Builder setStringValues(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValuesIsMutable();
        stringValues_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public Builder addStringValues(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValuesIsMutable();
        stringValues_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public Builder addAllStringValues(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stringValues_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public Builder clearStringValues() {
        stringValues_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of these must be set
       * This list are the observation values. If there are multiple samples this list can be longer than the number of
       * elements in the packed dimension. The list starts with observations for which the packed dimension is null,
       * the number of which is indicated by the nullElementCount value.
       * The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
       * indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
       * not accounted for values are absent.
       * </pre>
       *
       * <code>repeated string stringValues = 3;</code>
       */
      public Builder addStringValuesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureStringValuesIsMutable();
        stringValues_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> numericValues_ = java.util.Collections.emptyList();
      private void ensureNumericValuesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          numericValues_ = new java.util.ArrayList<java.lang.Double>(numericValues_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated double numericValues = 4;</code>
       */
      public java.util.List<java.lang.Double>
          getNumericValuesList() {
        return java.util.Collections.unmodifiableList(numericValues_);
      }
      /**
       * <code>repeated double numericValues = 4;</code>
       */
      public int getNumericValuesCount() {
        return numericValues_.size();
      }
      /**
       * <code>repeated double numericValues = 4;</code>
       */
      public double getNumericValues(int index) {
        return numericValues_.get(index);
      }
      /**
       * <code>repeated double numericValues = 4;</code>
       */
      public Builder setNumericValues(
          int index, double value) {
        ensureNumericValuesIsMutable();
        numericValues_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double numericValues = 4;</code>
       */
      public Builder addNumericValues(double value) {
        ensureNumericValuesIsMutable();
        numericValues_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double numericValues = 4;</code>
       */
      public Builder addAllNumericValues(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureNumericValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, numericValues_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double numericValues = 4;</code>
       */
      public Builder clearNumericValues() {
        numericValues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private int nullElementCount_ ;
      /**
       * <pre>
       * The number of values for which the packed dimension is null. These are prepended to the list of values.
       * </pre>
       *
       * <code>optional int32 nullElementCount = 8;</code>
       */
      public int getNullElementCount() {
        return nullElementCount_;
      }
      /**
       * <pre>
       * The number of values for which the packed dimension is null. These are prepended to the list of values.
       * </pre>
       *
       * <code>optional int32 nullElementCount = 8;</code>
       */
      public Builder setNullElementCount(int value) {
        
        nullElementCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of values for which the packed dimension is null. These are prepended to the list of values.
       * </pre>
       *
       * <code>optional int32 nullElementCount = 8;</code>
       */
      public Builder clearNullElementCount() {
        
        nullElementCount_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> sampleCounts_ = java.util.Collections.emptyList();
      private void ensureSampleCountsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          sampleCounts_ = new java.util.ArrayList<java.lang.Integer>(sampleCounts_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * Only one of these must be present.
       * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
       * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
       * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
       * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
       * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
       * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
       * This field is 1-based.
       * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
       * In either case the stringValues or numericValues contain all the values that are present concatenated together
       * in order.
       * </pre>
       *
       * <code>repeated int32 sampleCounts = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getSampleCountsList() {
        return java.util.Collections.unmodifiableList(sampleCounts_);
      }
      /**
       * <pre>
       * Only one of these must be present.
       * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
       * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
       * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
       * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
       * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
       * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
       * This field is 1-based.
       * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
       * In either case the stringValues or numericValues contain all the values that are present concatenated together
       * in order.
       * </pre>
       *
       * <code>repeated int32 sampleCounts = 5;</code>
       */
      public int getSampleCountsCount() {
        return sampleCounts_.size();
      }
      /**
       * <pre>
       * Only one of these must be present.
       * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
       * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
       * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
       * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
       * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
       * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
       * This field is 1-based.
       * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
       * In either case the stringValues or numericValues contain all the values that are present concatenated together
       * in order.
       * </pre>
       *
       * <code>repeated int32 sampleCounts = 5;</code>
       */
      public int getSampleCounts(int index) {
        return sampleCounts_.get(index);
      }
      /**
       * <pre>
       * Only one of these must be present.
       * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
       * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
       * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
       * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
       * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
       * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
       * This field is 1-based.
       * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
       * In either case the stringValues or numericValues contain all the values that are present concatenated together
       * in order.
       * </pre>
       *
       * <code>repeated int32 sampleCounts = 5;</code>
       */
      public Builder setSampleCounts(
          int index, int value) {
        ensureSampleCountsIsMutable();
        sampleCounts_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of these must be present.
       * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
       * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
       * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
       * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
       * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
       * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
       * This field is 1-based.
       * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
       * In either case the stringValues or numericValues contain all the values that are present concatenated together
       * in order.
       * </pre>
       *
       * <code>repeated int32 sampleCounts = 5;</code>
       */
      public Builder addSampleCounts(int value) {
        ensureSampleCountsIsMutable();
        sampleCounts_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of these must be present.
       * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
       * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
       * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
       * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
       * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
       * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
       * This field is 1-based.
       * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
       * In either case the stringValues or numericValues contain all the values that are present concatenated together
       * in order.
       * </pre>
       *
       * <code>repeated int32 sampleCounts = 5;</code>
       */
      public Builder addAllSampleCounts(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSampleCountsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sampleCounts_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Only one of these must be present.
       * If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
       * multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
       * must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
       * Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
       * If for each packed dimension element there are only zero or one value, the absentValues array should be used.
       * contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
       * This field is 1-based.
       * If neither are set, the array of values corresponds one-to-one to the packed dimension elements
       * In either case the stringValues or numericValues contain all the values that are present concatenated together
       * in order.
       * </pre>
       *
       * <code>repeated int32 sampleCounts = 5;</code>
       */
      public Builder clearSampleCounts() {
        sampleCounts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> absentValues_ = java.util.Collections.emptyList();
      private void ensureAbsentValuesIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          absentValues_ = new java.util.ArrayList<java.lang.Integer>(absentValues_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 absentValues = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getAbsentValuesList() {
        return java.util.Collections.unmodifiableList(absentValues_);
      }
      /**
       * <code>repeated int32 absentValues = 6;</code>
       */
      public int getAbsentValuesCount() {
        return absentValues_.size();
      }
      /**
       * <code>repeated int32 absentValues = 6;</code>
       */
      public int getAbsentValues(int index) {
        return absentValues_.get(index);
      }
      /**
       * <code>repeated int32 absentValues = 6;</code>
       */
      public Builder setAbsentValues(
          int index, int value) {
        ensureAbsentValuesIsMutable();
        absentValues_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 absentValues = 6;</code>
       */
      public Builder addAbsentValues(int value) {
        ensureAbsentValuesIsMutable();
        absentValues_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 absentValues = 6;</code>
       */
      public Builder addAllAbsentValues(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAbsentValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, absentValues_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 absentValues = 6;</code>
       */
      public Builder clearAbsentValues() {
        absentValues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private boolean last_ ;
      /**
       * <pre>
       * default: false
       * </pre>
       *
       * <code>optional bool last = 7;</code>
       */
      public boolean getLast() {
        return last_;
      }
      /**
       * <pre>
       * default: false
       * </pre>
       *
       * <code>optional bool last = 7;</code>
       */
      public Builder setLast(boolean value) {
        
        last_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * default: false
       * </pre>
       *
       * <code>optional bool last = 7;</code>
       */
      public Builder clearLast() {
        
        last_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.PackedCell)
    }

    // @@protoc_insertion_point(class_scope:hypercube.PackedCell)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PackedCell>
        PARSER = new com.google.protobuf.AbstractParser<PackedCell>() {
      public PackedCell parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new PackedCell(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PackedCell> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PackedCell> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.PackedCell getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DimensionElementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.DimensionElement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value> 
        getFieldsList();
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.Value getFields(int index);
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    int getFieldsCount();
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder> 
        getFieldsOrBuilderList();
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder getFieldsOrBuilder(
        int index);

    /**
     * <code>optional sint64 intValue = 2;</code>
     */
    long getIntValue();

    /**
     * <code>optional double doubleValue = 3;</code>
     */
    double getDoubleValue();

    /**
     * <code>optional string stringValue = 4;</code>
     */
    java.lang.String getStringValue();
    /**
     * <code>optional string stringValue = 4;</code>
     */
    com.google.protobuf.ByteString
        getStringValueBytes();

    /**
     * <code>optional int64 timestampValue = 5;</code>
     */
    long getTimestampValue();

    /**
     * <pre>
     * 1-based list of indices of fields that are absent
     * </pre>
     *
     * <code>repeated int32 absentFieldIndices = 6;</code>
     */
    java.util.List<java.lang.Integer> getAbsentFieldIndicesList();
    /**
     * <pre>
     * 1-based list of indices of fields that are absent
     * </pre>
     *
     * <code>repeated int32 absentFieldIndices = 6;</code>
     */
    int getAbsentFieldIndicesCount();
    /**
     * <pre>
     * 1-based list of indices of fields that are absent
     * </pre>
     *
     * <code>repeated int32 absentFieldIndices = 6;</code>
     */
    int getAbsentFieldIndices(int index);
  }
  /**
   * <pre>
   * note: singular
   * </pre>
   *
   * Protobuf type {@code hypercube.DimensionElement}
   */
  public  static final class DimensionElement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.DimensionElement)
      DimensionElementOrBuilder {
    // Use DimensionElement.newBuilder() to construct.
    private DimensionElement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DimensionElement() {
      fields_ = java.util.Collections.emptyList();
      intValue_ = 0L;
      doubleValue_ = 0D;
      stringValue_ = "";
      timestampValue_ = 0L;
      absentFieldIndices_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DimensionElement(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                fields_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value>();
                mutable_bitField0_ |= 0x00000001;
              }
              fields_.add(
                  input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.parser(), extensionRegistry));
              break;
            }
            case 16: {

              intValue_ = input.readSInt64();
              break;
            }
            case 25: {

              doubleValue_ = input.readDouble();
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              stringValue_ = s;
              break;
            }
            case 40: {

              timestampValue_ = input.readInt64();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                absentFieldIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              absentFieldIndices_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                absentFieldIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                absentFieldIndices_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          fields_ = java.util.Collections.unmodifiableList(fields_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          absentFieldIndices_ = java.util.Collections.unmodifiableList(absentFieldIndices_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElement_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder.class);
    }

    private int bitField0_;
    public static final int FIELDS_FIELD_NUMBER = 1;
    private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value> fields_;
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value> getFieldsList() {
      return fields_;
    }
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder> 
        getFieldsOrBuilderList() {
      return fields_;
    }
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    public int getFieldsCount() {
      return fields_.size();
    }
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value getFields(int index) {
      return fields_.get(index);
    }
    /**
     * <pre>
     * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
     * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
     * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
     * nested message for every inline dimension in each observation.
     * </pre>
     *
     * <code>repeated .hypercube.Value fields = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder getFieldsOrBuilder(
        int index) {
      return fields_.get(index);
    }

    public static final int INTVALUE_FIELD_NUMBER = 2;
    private long intValue_;
    /**
     * <code>optional sint64 intValue = 2;</code>
     */
    public long getIntValue() {
      return intValue_;
    }

    public static final int DOUBLEVALUE_FIELD_NUMBER = 3;
    private double doubleValue_;
    /**
     * <code>optional double doubleValue = 3;</code>
     */
    public double getDoubleValue() {
      return doubleValue_;
    }

    public static final int STRINGVALUE_FIELD_NUMBER = 4;
    private volatile java.lang.Object stringValue_;
    /**
     * <code>optional string stringValue = 4;</code>
     */
    public java.lang.String getStringValue() {
      java.lang.Object ref = stringValue_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stringValue_ = s;
        return s;
      }
    }
    /**
     * <code>optional string stringValue = 4;</code>
     */
    public com.google.protobuf.ByteString
        getStringValueBytes() {
      java.lang.Object ref = stringValue_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stringValue_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIMESTAMPVALUE_FIELD_NUMBER = 5;
    private long timestampValue_;
    /**
     * <code>optional int64 timestampValue = 5;</code>
     */
    public long getTimestampValue() {
      return timestampValue_;
    }

    public static final int ABSENTFIELDINDICES_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> absentFieldIndices_;
    /**
     * <pre>
     * 1-based list of indices of fields that are absent
     * </pre>
     *
     * <code>repeated int32 absentFieldIndices = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getAbsentFieldIndicesList() {
      return absentFieldIndices_;
    }
    /**
     * <pre>
     * 1-based list of indices of fields that are absent
     * </pre>
     *
     * <code>repeated int32 absentFieldIndices = 6;</code>
     */
    public int getAbsentFieldIndicesCount() {
      return absentFieldIndices_.size();
    }
    /**
     * <pre>
     * 1-based list of indices of fields that are absent
     * </pre>
     *
     * <code>repeated int32 absentFieldIndices = 6;</code>
     */
    public int getAbsentFieldIndices(int index) {
      return absentFieldIndices_.get(index);
    }
    private int absentFieldIndicesMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < fields_.size(); i++) {
        output.writeMessage(1, fields_.get(i));
      }
      if (intValue_ != 0L) {
        output.writeSInt64(2, intValue_);
      }
      if (doubleValue_ != 0D) {
        output.writeDouble(3, doubleValue_);
      }
      if (!getStringValueBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, stringValue_);
      }
      if (timestampValue_ != 0L) {
        output.writeInt64(5, timestampValue_);
      }
      if (getAbsentFieldIndicesList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(absentFieldIndicesMemoizedSerializedSize);
      }
      for (int i = 0; i < absentFieldIndices_.size(); i++) {
        output.writeInt32NoTag(absentFieldIndices_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < fields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, fields_.get(i));
      }
      if (intValue_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(2, intValue_);
      }
      if (doubleValue_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, doubleValue_);
      }
      if (!getStringValueBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, stringValue_);
      }
      if (timestampValue_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, timestampValue_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < absentFieldIndices_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(absentFieldIndices_.get(i));
        }
        size += dataSize;
        if (!getAbsentFieldIndicesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        absentFieldIndicesMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement) obj;

      boolean result = true;
      result = result && getFieldsList()
          .equals(other.getFieldsList());
      result = result && (getIntValue()
          == other.getIntValue());
      result = result && (
          java.lang.Double.doubleToLongBits(getDoubleValue())
          == java.lang.Double.doubleToLongBits(
              other.getDoubleValue()));
      result = result && getStringValue()
          .equals(other.getStringValue());
      result = result && (getTimestampValue()
          == other.getTimestampValue());
      result = result && getAbsentFieldIndicesList()
          .equals(other.getAbsentFieldIndicesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getFieldsCount() > 0) {
        hash = (37 * hash) + FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getFieldsList().hashCode();
      }
      hash = (37 * hash) + INTVALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getIntValue());
      hash = (37 * hash) + DOUBLEVALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getDoubleValue()));
      hash = (37 * hash) + STRINGVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getStringValue().hashCode();
      hash = (37 * hash) + TIMESTAMPVALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestampValue());
      if (getAbsentFieldIndicesCount() > 0) {
        hash = (37 * hash) + ABSENTFIELDINDICES_FIELD_NUMBER;
        hash = (53 * hash) + getAbsentFieldIndicesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * note: singular
     * </pre>
     *
     * Protobuf type {@code hypercube.DimensionElement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.DimensionElement)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElement_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFieldsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fieldsBuilder_.clear();
        }
        intValue_ = 0L;

        doubleValue_ = 0D;

        stringValue_ = "";

        timestampValue_ = 0L;

        absentFieldIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElement_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (fieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            fields_ = java.util.Collections.unmodifiableList(fields_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.fields_ = fields_;
        } else {
          result.fields_ = fieldsBuilder_.build();
        }
        result.intValue_ = intValue_;
        result.doubleValue_ = doubleValue_;
        result.stringValue_ = stringValue_;
        result.timestampValue_ = timestampValue_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          absentFieldIndices_ = java.util.Collections.unmodifiableList(absentFieldIndices_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.absentFieldIndices_ = absentFieldIndices_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement.getDefaultInstance()) return this;
        if (fieldsBuilder_ == null) {
          if (!other.fields_.isEmpty()) {
            if (fields_.isEmpty()) {
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFieldsIsMutable();
              fields_.addAll(other.fields_);
            }
            onChanged();
          }
        } else {
          if (!other.fields_.isEmpty()) {
            if (fieldsBuilder_.isEmpty()) {
              fieldsBuilder_.dispose();
              fieldsBuilder_ = null;
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldsFieldBuilder() : null;
            } else {
              fieldsBuilder_.addAllMessages(other.fields_);
            }
          }
        }
        if (other.getIntValue() != 0L) {
          setIntValue(other.getIntValue());
        }
        if (other.getDoubleValue() != 0D) {
          setDoubleValue(other.getDoubleValue());
        }
        if (!other.getStringValue().isEmpty()) {
          stringValue_ = other.stringValue_;
          onChanged();
        }
        if (other.getTimestampValue() != 0L) {
          setTimestampValue(other.getTimestampValue());
        }
        if (!other.absentFieldIndices_.isEmpty()) {
          if (absentFieldIndices_.isEmpty()) {
            absentFieldIndices_ = other.absentFieldIndices_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureAbsentFieldIndicesIsMutable();
            absentFieldIndices_.addAll(other.absentFieldIndices_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value> fields_ =
        java.util.Collections.emptyList();
      private void ensureFieldsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          fields_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value>(fields_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.Value, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder> fieldsBuilder_;

      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value> getFieldsList() {
        if (fieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fields_);
        } else {
          return fieldsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public int getFieldsCount() {
        if (fieldsBuilder_ == null) {
          return fields_.size();
        } else {
          return fieldsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value getFields(int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);
        } else {
          return fieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder setFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.set(index, value);
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder setFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder addFields(org.transmartproject.rest.hypercubeProto.ObservationsProto.Value value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder addFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(index, value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder addFields(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder addFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder addAllFields(
          java.lang.Iterable<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.Value> values) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fields_);
          onChanged();
        } else {
          fieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder clearFields() {
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public Builder removeFields(int index) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.remove(index);
          onChanged();
        } else {
          fieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder getFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder getFieldsOrBuilder(
          int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);  } else {
          return fieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder> 
           getFieldsOrBuilderList() {
        if (fieldsBuilder_ != null) {
          return fieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fields_);
        }
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder addFieldsBuilder() {
        return getFieldsFieldBuilder().addBuilder(
            org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.getDefaultInstance());
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder addFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().addBuilder(
            index, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.getDefaultInstance());
      }
      /**
       * <pre>
       * Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
       * int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
       * Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
       * nested message for every inline dimension in each observation.
       * </pre>
       *
       * <code>repeated .hypercube.Value fields = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder> 
           getFieldsBuilderList() {
        return getFieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.Value, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder> 
          getFieldsFieldBuilder() {
        if (fieldsBuilder_ == null) {
          fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.Value, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder>(
                  fields_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          fields_ = null;
        }
        return fieldsBuilder_;
      }

      private long intValue_ ;
      /**
       * <code>optional sint64 intValue = 2;</code>
       */
      public long getIntValue() {
        return intValue_;
      }
      /**
       * <code>optional sint64 intValue = 2;</code>
       */
      public Builder setIntValue(long value) {
        
        intValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint64 intValue = 2;</code>
       */
      public Builder clearIntValue() {
        
        intValue_ = 0L;
        onChanged();
        return this;
      }

      private double doubleValue_ ;
      /**
       * <code>optional double doubleValue = 3;</code>
       */
      public double getDoubleValue() {
        return doubleValue_;
      }
      /**
       * <code>optional double doubleValue = 3;</code>
       */
      public Builder setDoubleValue(double value) {
        
        doubleValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double doubleValue = 3;</code>
       */
      public Builder clearDoubleValue() {
        
        doubleValue_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object stringValue_ = "";
      /**
       * <code>optional string stringValue = 4;</code>
       */
      public java.lang.String getStringValue() {
        java.lang.Object ref = stringValue_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stringValue_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string stringValue = 4;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes() {
        java.lang.Object ref = stringValue_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stringValue_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string stringValue = 4;</code>
       */
      public Builder setStringValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stringValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string stringValue = 4;</code>
       */
      public Builder clearStringValue() {
        
        stringValue_ = getDefaultInstance().getStringValue();
        onChanged();
        return this;
      }
      /**
       * <code>optional string stringValue = 4;</code>
       */
      public Builder setStringValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stringValue_ = value;
        onChanged();
        return this;
      }

      private long timestampValue_ ;
      /**
       * <code>optional int64 timestampValue = 5;</code>
       */
      public long getTimestampValue() {
        return timestampValue_;
      }
      /**
       * <code>optional int64 timestampValue = 5;</code>
       */
      public Builder setTimestampValue(long value) {
        
        timestampValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 timestampValue = 5;</code>
       */
      public Builder clearTimestampValue() {
        
        timestampValue_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> absentFieldIndices_ = java.util.Collections.emptyList();
      private void ensureAbsentFieldIndicesIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          absentFieldIndices_ = new java.util.ArrayList<java.lang.Integer>(absentFieldIndices_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * 1-based list of indices of fields that are absent
       * </pre>
       *
       * <code>repeated int32 absentFieldIndices = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getAbsentFieldIndicesList() {
        return java.util.Collections.unmodifiableList(absentFieldIndices_);
      }
      /**
       * <pre>
       * 1-based list of indices of fields that are absent
       * </pre>
       *
       * <code>repeated int32 absentFieldIndices = 6;</code>
       */
      public int getAbsentFieldIndicesCount() {
        return absentFieldIndices_.size();
      }
      /**
       * <pre>
       * 1-based list of indices of fields that are absent
       * </pre>
       *
       * <code>repeated int32 absentFieldIndices = 6;</code>
       */
      public int getAbsentFieldIndices(int index) {
        return absentFieldIndices_.get(index);
      }
      /**
       * <pre>
       * 1-based list of indices of fields that are absent
       * </pre>
       *
       * <code>repeated int32 absentFieldIndices = 6;</code>
       */
      public Builder setAbsentFieldIndices(
          int index, int value) {
        ensureAbsentFieldIndicesIsMutable();
        absentFieldIndices_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices of fields that are absent
       * </pre>
       *
       * <code>repeated int32 absentFieldIndices = 6;</code>
       */
      public Builder addAbsentFieldIndices(int value) {
        ensureAbsentFieldIndicesIsMutable();
        absentFieldIndices_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices of fields that are absent
       * </pre>
       *
       * <code>repeated int32 absentFieldIndices = 6;</code>
       */
      public Builder addAllAbsentFieldIndices(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAbsentFieldIndicesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, absentFieldIndices_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices of fields that are absent
       * </pre>
       *
       * <code>repeated int32 absentFieldIndices = 6;</code>
       */
      public Builder clearAbsentFieldIndices() {
        absentFieldIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.DimensionElement)
    }

    // @@protoc_insertion_point(class_scope:hypercube.DimensionElement)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DimensionElement>
        PARSER = new com.google.protobuf.AbstractParser<DimensionElement>() {
      public DimensionElement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DimensionElement(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DimensionElement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DimensionElement> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.Value)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string stringValue = 1;</code>
     */
    java.lang.String getStringValue();
    /**
     * <code>optional string stringValue = 1;</code>
     */
    com.google.protobuf.ByteString
        getStringValueBytes();

    /**
     * <code>optional double doubleValue = 2;</code>
     */
    double getDoubleValue();

    /**
     * <code>optional sint64 intValue = 3;</code>
     */
    long getIntValue();

    /**
     * <code>optional int64 timestampValue = 4;</code>
     */
    long getTimestampValue();

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.ValueCase getValueCase();
  }
  /**
   * Protobuf type {@code hypercube.Value}
   */
  public  static final class Value extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.Value)
      ValueOrBuilder {
    // Use Value.newBuilder() to construct.
    private Value(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Value() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Value(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              valueCase_ = 1;
              value_ = s;
              break;
            }
            case 17: {
              valueCase_ = 2;
              value_ = input.readDouble();
              break;
            }
            case 24: {
              valueCase_ = 3;
              value_ = input.readSInt64();
              break;
            }
            case 32: {
              valueCase_ = 4;
              value_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Value_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Value_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder.class);
    }

    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements com.google.protobuf.Internal.EnumLite {
      STRINGVALUE(1),
      DOUBLEVALUE(2),
      INTVALUE(3),
      TIMESTAMPVALUE(4),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 1: return STRINGVALUE;
          case 2: return DOUBLEVALUE;
          case 3: return INTVALUE;
          case 4: return TIMESTAMPVALUE;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int STRINGVALUE_FIELD_NUMBER = 1;
    /**
     * <code>optional string stringValue = 1;</code>
     */
    public java.lang.String getStringValue() {
      java.lang.Object ref = "";
      if (valueCase_ == 1) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (valueCase_ == 1) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string stringValue = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStringValueBytes() {
      java.lang.Object ref = "";
      if (valueCase_ == 1) {
        ref = value_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (valueCase_ == 1) {
          value_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DOUBLEVALUE_FIELD_NUMBER = 2;
    /**
     * <code>optional double doubleValue = 2;</code>
     */
    public double getDoubleValue() {
      if (valueCase_ == 2) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int INTVALUE_FIELD_NUMBER = 3;
    /**
     * <code>optional sint64 intValue = 3;</code>
     */
    public long getIntValue() {
      if (valueCase_ == 3) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int TIMESTAMPVALUE_FIELD_NUMBER = 4;
    /**
     * <code>optional int64 timestampValue = 4;</code>
     */
    public long getTimestampValue() {
      if (valueCase_ == 4) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (valueCase_ == 1) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, value_);
      }
      if (valueCase_ == 2) {
        output.writeDouble(
            2, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 3) {
        output.writeSInt64(
            3, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 4) {
        output.writeInt64(
            4, (long)((java.lang.Long) value_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (valueCase_ == 1) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, value_);
      }
      if (valueCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              2, (double)((java.lang.Double) value_));
      }
      if (valueCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(
              3, (long)((java.lang.Long) value_));
      }
      if (valueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              4, (long)((java.lang.Long) value_));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Value)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.Value other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Value) obj;

      boolean result = true;
      result = result && getValueCase().equals(
          other.getValueCase());
      if (!result) return false;
      switch (valueCase_) {
        case 1:
          result = result && getStringValue()
              .equals(other.getStringValue());
          break;
        case 2:
          result = result && (
              java.lang.Double.doubleToLongBits(getDoubleValue())
              == java.lang.Double.doubleToLongBits(
                  other.getDoubleValue()));
          break;
        case 3:
          result = result && (getIntValue()
              == other.getIntValue());
          break;
        case 4:
          result = result && (getTimestampValue()
              == other.getTimestampValue());
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      switch (valueCase_) {
        case 1:
          hash = (37 * hash) + STRINGVALUE_FIELD_NUMBER;
          hash = (53 * hash) + getStringValue().hashCode();
          break;
        case 2:
          hash = (37 * hash) + DOUBLEVALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getDoubleValue()));
          break;
        case 3:
          hash = (37 * hash) + INTVALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getIntValue());
          break;
        case 4:
          hash = (37 * hash) + TIMESTAMPVALUE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTimestampValue());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.Value prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hypercube.Value}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.Value)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.ValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Value_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Value_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        valueCase_ = 0;
        value_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Value_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Value result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Value result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Value(this);
        if (valueCase_ == 1) {
          result.value_ = value_;
        }
        if (valueCase_ == 2) {
          result.value_ = value_;
        }
        if (valueCase_ == 3) {
          result.value_ = value_;
        }
        if (valueCase_ == 4) {
          result.value_ = value_;
        }
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Value) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.Value)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.Value other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.Value.getDefaultInstance()) return this;
        switch (other.getValueCase()) {
          case STRINGVALUE: {
            valueCase_ = 1;
            value_ = other.value_;
            onChanged();
            break;
          }
          case DOUBLEVALUE: {
            setDoubleValue(other.getDoubleValue());
            break;
          }
          case INTVALUE: {
            setIntValue(other.getIntValue());
            break;
          }
          case TIMESTAMPVALUE: {
            setTimestampValue(other.getTimestampValue());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Value parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Value) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }


      /**
       * <code>optional string stringValue = 1;</code>
       */
      public java.lang.String getStringValue() {
        java.lang.Object ref = "";
        if (valueCase_ == 1) {
          ref = value_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (valueCase_ == 1) {
            value_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string stringValue = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes() {
        java.lang.Object ref = "";
        if (valueCase_ == 1) {
          ref = value_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (valueCase_ == 1) {
            value_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string stringValue = 1;</code>
       */
      public Builder setStringValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  valueCase_ = 1;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string stringValue = 1;</code>
       */
      public Builder clearStringValue() {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional string stringValue = 1;</code>
       */
      public Builder setStringValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        valueCase_ = 1;
        value_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>optional double doubleValue = 2;</code>
       */
      public double getDoubleValue() {
        if (valueCase_ == 2) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>optional double doubleValue = 2;</code>
       */
      public Builder setDoubleValue(double value) {
        valueCase_ = 2;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double doubleValue = 2;</code>
       */
      public Builder clearDoubleValue() {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional sint64 intValue = 3;</code>
       */
      public long getIntValue() {
        if (valueCase_ == 3) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>optional sint64 intValue = 3;</code>
       */
      public Builder setIntValue(long value) {
        valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint64 intValue = 3;</code>
       */
      public Builder clearIntValue() {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional int64 timestampValue = 4;</code>
       */
      public long getTimestampValue() {
        if (valueCase_ == 4) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>optional int64 timestampValue = 4;</code>
       */
      public Builder setTimestampValue(long value) {
        valueCase_ = 4;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 timestampValue = 4;</code>
       */
      public Builder clearTimestampValue() {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.Value)
    }

    // @@protoc_insertion_point(class_scope:hypercube.Value)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.Value DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Value();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Value getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Value>
        PARSER = new com.google.protobuf.AbstractParser<Value>() {
      public Value parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Value(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Value> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Value> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Value getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FooterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.Footer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> 
        getDimensionList();
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getDimension(int index);
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    int getDimensionCount();
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
        getDimensionOrBuilderList();
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getDimensionOrBuilder(
        int index);

    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    java.lang.String getError();
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * Protobuf type {@code hypercube.Footer}
   */
  public  static final class Footer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.Footer)
      FooterOrBuilder {
    // Use Footer.newBuilder() to construct.
    private Footer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Footer() {
      dimension_ = java.util.Collections.emptyList();
      error_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Footer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                dimension_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements>();
                mutable_bitField0_ |= 0x00000001;
              }
              dimension_.add(
                  input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.parser(), extensionRegistry));
              break;
            }
            case 794: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          dimension_ = java.util.Collections.unmodifiableList(dimension_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Footer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Footer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer.Builder.class);
    }

    private int bitField0_;
    public static final int DIMENSION_FIELD_NUMBER = 1;
    private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> dimension_;
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> getDimensionList() {
      return dimension_;
    }
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
        getDimensionOrBuilderList() {
      return dimension_;
    }
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    public int getDimensionCount() {
      return dimension_.size();
    }
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getDimension(int index) {
      return dimension_.get(index);
    }
    /**
     * <pre>
     * List of dimensions (e.g. patients, concepts, trialVisits, etc)
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getDimensionOrBuilder(
        int index) {
      return dimension_.get(index);
    }

    public static final int ERROR_FIELD_NUMBER = 99;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dimension_.size(); i++) {
        output.writeMessage(1, dimension_.get(i));
      }
      if (!getErrorBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 99, error_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dimension_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dimension_.get(i));
      }
      if (!getErrorBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(99, error_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer) obj;

      boolean result = true;
      result = result && getDimensionList()
          .equals(other.getDimensionList());
      result = result && getError()
          .equals(other.getError());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getDimensionCount() > 0) {
        hash = (37 * hash) + DIMENSION_FIELD_NUMBER;
        hash = (53 * hash) + getDimensionList().hashCode();
      }
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hypercube.Footer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.Footer)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.FooterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Footer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Footer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDimensionFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (dimensionBuilder_ == null) {
          dimension_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dimensionBuilder_.clear();
        }
        error_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Footer_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (dimensionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            dimension_ = java.util.Collections.unmodifiableList(dimension_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dimension_ = dimension_;
        } else {
          result.dimension_ = dimensionBuilder_.build();
        }
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer.getDefaultInstance()) return this;
        if (dimensionBuilder_ == null) {
          if (!other.dimension_.isEmpty()) {
            if (dimension_.isEmpty()) {
              dimension_ = other.dimension_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDimensionIsMutable();
              dimension_.addAll(other.dimension_);
            }
            onChanged();
          }
        } else {
          if (!other.dimension_.isEmpty()) {
            if (dimensionBuilder_.isEmpty()) {
              dimensionBuilder_.dispose();
              dimensionBuilder_ = null;
              dimension_ = other.dimension_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dimensionBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDimensionFieldBuilder() : null;
            } else {
              dimensionBuilder_.addAllMessages(other.dimension_);
            }
          }
        }
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> dimension_ =
        java.util.Collections.emptyList();
      private void ensureDimensionIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          dimension_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements>(dimension_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> dimensionBuilder_;

      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> getDimensionList() {
        if (dimensionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dimension_);
        } else {
          return dimensionBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public int getDimensionCount() {
        if (dimensionBuilder_ == null) {
          return dimension_.size();
        } else {
          return dimensionBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getDimension(int index) {
        if (dimensionBuilder_ == null) {
          return dimension_.get(index);
        } else {
          return dimensionBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder setDimension(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (dimensionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDimensionIsMutable();
          dimension_.set(index, value);
          onChanged();
        } else {
          dimensionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder setDimension(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder builderForValue) {
        if (dimensionBuilder_ == null) {
          ensureDimensionIsMutable();
          dimension_.set(index, builderForValue.build());
          onChanged();
        } else {
          dimensionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder addDimension(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (dimensionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDimensionIsMutable();
          dimension_.add(value);
          onChanged();
        } else {
          dimensionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder addDimension(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements value) {
        if (dimensionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDimensionIsMutable();
          dimension_.add(index, value);
          onChanged();
        } else {
          dimensionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder addDimension(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder builderForValue) {
        if (dimensionBuilder_ == null) {
          ensureDimensionIsMutable();
          dimension_.add(builderForValue.build());
          onChanged();
        } else {
          dimensionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder addDimension(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder builderForValue) {
        if (dimensionBuilder_ == null) {
          ensureDimensionIsMutable();
          dimension_.add(index, builderForValue.build());
          onChanged();
        } else {
          dimensionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder addAllDimension(
          java.lang.Iterable<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements> values) {
        if (dimensionBuilder_ == null) {
          ensureDimensionIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dimension_);
          onChanged();
        } else {
          dimensionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder clearDimension() {
        if (dimensionBuilder_ == null) {
          dimension_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dimensionBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public Builder removeDimension(int index) {
        if (dimensionBuilder_ == null) {
          ensureDimensionIsMutable();
          dimension_.remove(index);
          onChanged();
        } else {
          dimensionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder getDimensionBuilder(
          int index) {
        return getDimensionFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder getDimensionOrBuilder(
          int index) {
        if (dimensionBuilder_ == null) {
          return dimension_.get(index);  } else {
          return dimensionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
           getDimensionOrBuilderList() {
        if (dimensionBuilder_ != null) {
          return dimensionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dimension_);
        }
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder addDimensionBuilder() {
        return getDimensionFieldBuilder().addBuilder(
            org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance());
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder addDimensionBuilder(
          int index) {
        return getDimensionFieldBuilder().addBuilder(
            index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance());
      }
      /**
       * <pre>
       * List of dimensions (e.g. patients, concepts, trialVisits, etc)
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElements dimension = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder> 
           getDimensionBuilderList() {
        return getDimensionFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder> 
          getDimensionFieldBuilder() {
        if (dimensionBuilder_ == null) {
          dimensionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder>(
                  dimension_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          dimension_ = null;
        }
        return dimensionBuilder_;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.Footer)
    }

    // @@protoc_insertion_point(class_scope:hypercube.Footer)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Footer>
        PARSER = new com.google.protobuf.AbstractParser<Footer>() {
      public Footer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Footer(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Footer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Footer> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Footer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DimensionElementsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.DimensionElements)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * not used when a DimensionElements is embedded in a PackedObservation
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * not used when a DimensionElements is embedded in a PackedObservation
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn> 
        getFieldsList();
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn getFields(int index);
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    int getFieldsCount();
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder> 
        getFieldsOrBuilderList();
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder getFieldsOrBuilder(
        int index);

    /**
     * <pre>
     * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
     * </pre>
     *
     * <code>repeated int32 absentFieldColumnIndices = 4;</code>
     */
    java.util.List<java.lang.Integer> getAbsentFieldColumnIndicesList();
    /**
     * <pre>
     * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
     * </pre>
     *
     * <code>repeated int32 absentFieldColumnIndices = 4;</code>
     */
    int getAbsentFieldColumnIndicesCount();
    /**
     * <pre>
     * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
     * </pre>
     *
     * <code>repeated int32 absentFieldColumnIndices = 4;</code>
     */
    int getAbsentFieldColumnIndices(int index);

    /**
     * <pre>
     * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
     * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
     * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
     * </pre>
     *
     * <code>repeated int32 absentElementIndices = 5;</code>
     */
    java.util.List<java.lang.Integer> getAbsentElementIndicesList();
    /**
     * <pre>
     * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
     * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
     * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
     * </pre>
     *
     * <code>repeated int32 absentElementIndices = 5;</code>
     */
    int getAbsentElementIndicesCount();
    /**
     * <pre>
     * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
     * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
     * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
     * </pre>
     *
     * <code>repeated int32 absentElementIndices = 5;</code>
     */
    int getAbsentElementIndices(int index);

    /**
     * <pre>
     * Set to true if there are no elements whatsoever in this DimensionElements. In that case `fields`,
     * `absentFieldColumnIndices` and `absentElementsIndices` will all be empty.
     * </pre>
     *
     * <code>optional bool empty = 6;</code>
     */
    boolean getEmpty();

    /**
     * <pre>
     * if perSample is set we are in mode 3, there is an individual element for each observation
     * </pre>
     *
     * <code>optional bool perSample = 2;</code>
     */
    boolean getPerSample();

    /**
     * <pre>
     * if perPackedCell is set we are in mode 1. This DimensionElements contains only a single element, which
     * applies to all observations in the packedCell
     * </pre>
     *
     * <code>optional bool perPackedCell = 7;</code>
     */
    boolean getPerPackedCell();

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.ScopeCase getScopeCase();
  }
  /**
   * <pre>
   * note: plural
   * </pre>
   *
   * Protobuf type {@code hypercube.DimensionElements}
   */
  public  static final class DimensionElements extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.DimensionElements)
      DimensionElementsOrBuilder {
    // Use DimensionElements.newBuilder() to construct.
    private DimensionElements(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DimensionElements() {
      name_ = "";
      fields_ = java.util.Collections.emptyList();
      absentFieldColumnIndices_ = java.util.Collections.emptyList();
      absentElementIndices_ = java.util.Collections.emptyList();
      empty_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DimensionElements(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                fields_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn>();
                mutable_bitField0_ |= 0x00000002;
              }
              fields_.add(
                  input.readMessage(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.parser(), extensionRegistry));
              break;
            }
            case 16: {
              scopeCase_ = 2;
              scope_ = input.readBool();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                absentFieldColumnIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              absentFieldColumnIndices_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                absentFieldColumnIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                absentFieldColumnIndices_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                absentElementIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              absentElementIndices_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                absentElementIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                absentElementIndices_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {

              empty_ = input.readBool();
              break;
            }
            case 56: {
              scopeCase_ = 7;
              scope_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          fields_ = java.util.Collections.unmodifiableList(fields_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          absentFieldColumnIndices_ = java.util.Collections.unmodifiableList(absentFieldColumnIndices_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          absentElementIndices_ = java.util.Collections.unmodifiableList(absentElementIndices_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElements_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElements_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder.class);
    }

    private int bitField0_;
    private int scopeCase_ = 0;
    private java.lang.Object scope_;
    public enum ScopeCase
        implements com.google.protobuf.Internal.EnumLite {
      PERSAMPLE(2),
      PERPACKEDCELL(7),
      SCOPE_NOT_SET(0);
      private final int value;
      private ScopeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScopeCase valueOf(int value) {
        return forNumber(value);
      }

      public static ScopeCase forNumber(int value) {
        switch (value) {
          case 2: return PERSAMPLE;
          case 7: return PERPACKEDCELL;
          case 0: return SCOPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ScopeCase
    getScopeCase() {
      return ScopeCase.forNumber(
          scopeCase_);
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * not used when a DimensionElements is embedded in a PackedObservation
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * not used when a DimensionElements is embedded in a PackedObservation
     * </pre>
     *
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIELDS_FIELD_NUMBER = 1;
    private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn> fields_;
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn> getFieldsList() {
      return fields_;
    }
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder> 
        getFieldsOrBuilderList() {
      return fields_;
    }
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    public int getFieldsCount() {
      return fields_.size();
    }
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn getFields(int index) {
      return fields_.get(index);
    }
    /**
     * <pre>
     * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
     * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
     * </pre>
     *
     * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
     */
    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder getFieldsOrBuilder(
        int index) {
      return fields_.get(index);
    }

    public static final int ABSENTFIELDCOLUMNINDICES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> absentFieldColumnIndices_;
    /**
     * <pre>
     * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
     * </pre>
     *
     * <code>repeated int32 absentFieldColumnIndices = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getAbsentFieldColumnIndicesList() {
      return absentFieldColumnIndices_;
    }
    /**
     * <pre>
     * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
     * </pre>
     *
     * <code>repeated int32 absentFieldColumnIndices = 4;</code>
     */
    public int getAbsentFieldColumnIndicesCount() {
      return absentFieldColumnIndices_.size();
    }
    /**
     * <pre>
     * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
     * </pre>
     *
     * <code>repeated int32 absentFieldColumnIndices = 4;</code>
     */
    public int getAbsentFieldColumnIndices(int index) {
      return absentFieldColumnIndices_.get(index);
    }
    private int absentFieldColumnIndicesMemoizedSerializedSize = -1;

    public static final int ABSENTELEMENTINDICES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> absentElementIndices_;
    /**
     * <pre>
     * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
     * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
     * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
     * </pre>
     *
     * <code>repeated int32 absentElementIndices = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getAbsentElementIndicesList() {
      return absentElementIndices_;
    }
    /**
     * <pre>
     * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
     * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
     * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
     * </pre>
     *
     * <code>repeated int32 absentElementIndices = 5;</code>
     */
    public int getAbsentElementIndicesCount() {
      return absentElementIndices_.size();
    }
    /**
     * <pre>
     * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
     * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
     * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
     * </pre>
     *
     * <code>repeated int32 absentElementIndices = 5;</code>
     */
    public int getAbsentElementIndices(int index) {
      return absentElementIndices_.get(index);
    }
    private int absentElementIndicesMemoizedSerializedSize = -1;

    public static final int EMPTY_FIELD_NUMBER = 6;
    private boolean empty_;
    /**
     * <pre>
     * Set to true if there are no elements whatsoever in this DimensionElements. In that case `fields`,
     * `absentFieldColumnIndices` and `absentElementsIndices` will all be empty.
     * </pre>
     *
     * <code>optional bool empty = 6;</code>
     */
    public boolean getEmpty() {
      return empty_;
    }

    public static final int PERSAMPLE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * if perSample is set we are in mode 3, there is an individual element for each observation
     * </pre>
     *
     * <code>optional bool perSample = 2;</code>
     */
    public boolean getPerSample() {
      if (scopeCase_ == 2) {
        return (java.lang.Boolean) scope_;
      }
      return false;
    }

    public static final int PERPACKEDCELL_FIELD_NUMBER = 7;
    /**
     * <pre>
     * if perPackedCell is set we are in mode 1. This DimensionElements contains only a single element, which
     * applies to all observations in the packedCell
     * </pre>
     *
     * <code>optional bool perPackedCell = 7;</code>
     */
    public boolean getPerPackedCell() {
      if (scopeCase_ == 7) {
        return (java.lang.Boolean) scope_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < fields_.size(); i++) {
        output.writeMessage(1, fields_.get(i));
      }
      if (scopeCase_ == 2) {
        output.writeBool(
            2, (boolean)((java.lang.Boolean) scope_));
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (getAbsentFieldColumnIndicesList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(absentFieldColumnIndicesMemoizedSerializedSize);
      }
      for (int i = 0; i < absentFieldColumnIndices_.size(); i++) {
        output.writeInt32NoTag(absentFieldColumnIndices_.get(i));
      }
      if (getAbsentElementIndicesList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(absentElementIndicesMemoizedSerializedSize);
      }
      for (int i = 0; i < absentElementIndices_.size(); i++) {
        output.writeInt32NoTag(absentElementIndices_.get(i));
      }
      if (empty_ != false) {
        output.writeBool(6, empty_);
      }
      if (scopeCase_ == 7) {
        output.writeBool(
            7, (boolean)((java.lang.Boolean) scope_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < fields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, fields_.get(i));
      }
      if (scopeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              2, (boolean)((java.lang.Boolean) scope_));
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < absentFieldColumnIndices_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(absentFieldColumnIndices_.get(i));
        }
        size += dataSize;
        if (!getAbsentFieldColumnIndicesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        absentFieldColumnIndicesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < absentElementIndices_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(absentElementIndices_.get(i));
        }
        size += dataSize;
        if (!getAbsentElementIndicesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        absentElementIndicesMemoizedSerializedSize = dataSize;
      }
      if (empty_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, empty_);
      }
      if (scopeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              7, (boolean)((java.lang.Boolean) scope_));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && getFieldsList()
          .equals(other.getFieldsList());
      result = result && getAbsentFieldColumnIndicesList()
          .equals(other.getAbsentFieldColumnIndicesList());
      result = result && getAbsentElementIndicesList()
          .equals(other.getAbsentElementIndicesList());
      result = result && (getEmpty()
          == other.getEmpty());
      result = result && getScopeCase().equals(
          other.getScopeCase());
      if (!result) return false;
      switch (scopeCase_) {
        case 2:
          result = result && (getPerSample()
              == other.getPerSample());
          break;
        case 7:
          result = result && (getPerPackedCell()
              == other.getPerPackedCell());
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (getFieldsCount() > 0) {
        hash = (37 * hash) + FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getFieldsList().hashCode();
      }
      if (getAbsentFieldColumnIndicesCount() > 0) {
        hash = (37 * hash) + ABSENTFIELDCOLUMNINDICES_FIELD_NUMBER;
        hash = (53 * hash) + getAbsentFieldColumnIndicesList().hashCode();
      }
      if (getAbsentElementIndicesCount() > 0) {
        hash = (37 * hash) + ABSENTELEMENTINDICES_FIELD_NUMBER;
        hash = (53 * hash) + getAbsentElementIndicesList().hashCode();
      }
      hash = (37 * hash) + EMPTY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEmpty());
      switch (scopeCase_) {
        case 2:
          hash = (37 * hash) + PERSAMPLE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getPerSample());
          break;
        case 7:
          hash = (37 * hash) + PERPACKEDCELL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getPerPackedCell());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * note: plural
     * </pre>
     *
     * Protobuf type {@code hypercube.DimensionElements}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.DimensionElements)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElements_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElements_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFieldsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          fieldsBuilder_.clear();
        }
        absentFieldColumnIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        absentElementIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        empty_ = false;

        scopeCase_ = 0;
        scope_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElements_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.name_ = name_;
        if (fieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            fields_ = java.util.Collections.unmodifiableList(fields_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.fields_ = fields_;
        } else {
          result.fields_ = fieldsBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          absentFieldColumnIndices_ = java.util.Collections.unmodifiableList(absentFieldColumnIndices_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.absentFieldColumnIndices_ = absentFieldColumnIndices_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          absentElementIndices_ = java.util.Collections.unmodifiableList(absentElementIndices_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.absentElementIndices_ = absentElementIndices_;
        result.empty_ = empty_;
        if (scopeCase_ == 2) {
          result.scope_ = scope_;
        }
        if (scopeCase_ == 7) {
          result.scope_ = scope_;
        }
        result.bitField0_ = to_bitField0_;
        result.scopeCase_ = scopeCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (fieldsBuilder_ == null) {
          if (!other.fields_.isEmpty()) {
            if (fields_.isEmpty()) {
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureFieldsIsMutable();
              fields_.addAll(other.fields_);
            }
            onChanged();
          }
        } else {
          if (!other.fields_.isEmpty()) {
            if (fieldsBuilder_.isEmpty()) {
              fieldsBuilder_.dispose();
              fieldsBuilder_ = null;
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000002);
              fieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldsFieldBuilder() : null;
            } else {
              fieldsBuilder_.addAllMessages(other.fields_);
            }
          }
        }
        if (!other.absentFieldColumnIndices_.isEmpty()) {
          if (absentFieldColumnIndices_.isEmpty()) {
            absentFieldColumnIndices_ = other.absentFieldColumnIndices_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureAbsentFieldColumnIndicesIsMutable();
            absentFieldColumnIndices_.addAll(other.absentFieldColumnIndices_);
          }
          onChanged();
        }
        if (!other.absentElementIndices_.isEmpty()) {
          if (absentElementIndices_.isEmpty()) {
            absentElementIndices_ = other.absentElementIndices_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAbsentElementIndicesIsMutable();
            absentElementIndices_.addAll(other.absentElementIndices_);
          }
          onChanged();
        }
        if (other.getEmpty() != false) {
          setEmpty(other.getEmpty());
        }
        switch (other.getScopeCase()) {
          case PERSAMPLE: {
            setPerSample(other.getPerSample());
            break;
          }
          case PERPACKEDCELL: {
            setPerPackedCell(other.getPerPackedCell());
            break;
          }
          case SCOPE_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int scopeCase_ = 0;
      private java.lang.Object scope_;
      public ScopeCase
          getScopeCase() {
        return ScopeCase.forNumber(
            scopeCase_);
      }

      public Builder clearScope() {
        scopeCase_ = 0;
        scope_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * not used when a DimensionElements is embedded in a PackedObservation
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * not used when a DimensionElements is embedded in a PackedObservation
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * not used when a DimensionElements is embedded in a PackedObservation
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * not used when a DimensionElements is embedded in a PackedObservation
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * not used when a DimensionElements is embedded in a PackedObservation
       * </pre>
       *
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn> fields_ =
        java.util.Collections.emptyList();
      private void ensureFieldsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          fields_ = new java.util.ArrayList<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn>(fields_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder> fieldsBuilder_;

      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn> getFieldsList() {
        if (fieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fields_);
        } else {
          return fieldsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public int getFieldsCount() {
        if (fieldsBuilder_ == null) {
          return fields_.size();
        } else {
          return fieldsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn getFields(int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);
        } else {
          return fieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder setFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.set(index, value);
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder setFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder addFields(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder addFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(index, value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder addFields(
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder addFields(
          int index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder addAllFields(
          java.lang.Iterable<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn> values) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fields_);
          onChanged();
        } else {
          fieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder clearFields() {
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public Builder removeFields(int index) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.remove(index);
          onChanged();
        } else {
          fieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder getFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder getFieldsOrBuilder(
          int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);  } else {
          return fieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public java.util.List<? extends org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder> 
           getFieldsOrBuilderList() {
        if (fieldsBuilder_ != null) {
          return fieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fields_);
        }
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder addFieldsBuilder() {
        return getFieldsFieldBuilder().addBuilder(
            org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.getDefaultInstance());
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder addFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().addBuilder(
            index, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.getDefaultInstance());
      }
      /**
       * <pre>
       * List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
       * field are absent on all encoded dimension elements, that list of field values is omitted entirely.
       * </pre>
       *
       * <code>repeated .hypercube.DimensionElementFieldColumn fields = 1;</code>
       */
      public java.util.List<org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder> 
           getFieldsBuilderList() {
        return getFieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder> 
          getFieldsFieldBuilder() {
        if (fieldsBuilder_ == null) {
          fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder>(
                  fields_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          fields_ = null;
        }
        return fieldsBuilder_;
      }

      private java.util.List<java.lang.Integer> absentFieldColumnIndices_ = java.util.Collections.emptyList();
      private void ensureAbsentFieldColumnIndicesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          absentFieldColumnIndices_ = new java.util.ArrayList<java.lang.Integer>(absentFieldColumnIndices_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
       * </pre>
       *
       * <code>repeated int32 absentFieldColumnIndices = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getAbsentFieldColumnIndicesList() {
        return java.util.Collections.unmodifiableList(absentFieldColumnIndices_);
      }
      /**
       * <pre>
       * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
       * </pre>
       *
       * <code>repeated int32 absentFieldColumnIndices = 4;</code>
       */
      public int getAbsentFieldColumnIndicesCount() {
        return absentFieldColumnIndices_.size();
      }
      /**
       * <pre>
       * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
       * </pre>
       *
       * <code>repeated int32 absentFieldColumnIndices = 4;</code>
       */
      public int getAbsentFieldColumnIndices(int index) {
        return absentFieldColumnIndices_.get(index);
      }
      /**
       * <pre>
       * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
       * </pre>
       *
       * <code>repeated int32 absentFieldColumnIndices = 4;</code>
       */
      public Builder setAbsentFieldColumnIndices(
          int index, int value) {
        ensureAbsentFieldColumnIndicesIsMutable();
        absentFieldColumnIndices_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
       * </pre>
       *
       * <code>repeated int32 absentFieldColumnIndices = 4;</code>
       */
      public Builder addAbsentFieldColumnIndices(int value) {
        ensureAbsentFieldColumnIndicesIsMutable();
        absentFieldColumnIndices_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
       * </pre>
       *
       * <code>repeated int32 absentFieldColumnIndices = 4;</code>
       */
      public Builder addAllAbsentFieldColumnIndices(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAbsentFieldColumnIndicesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, absentFieldColumnIndices_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices for which the fields are absent in all dimension elements encoded here.
       * </pre>
       *
       * <code>repeated int32 absentFieldColumnIndices = 4;</code>
       */
      public Builder clearAbsentFieldColumnIndices() {
        absentFieldColumnIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> absentElementIndices_ = java.util.Collections.emptyList();
      private void ensureAbsentElementIndicesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          absentElementIndices_ = new java.util.ArrayList<java.lang.Integer>(absentElementIndices_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
       * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
       * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
       * </pre>
       *
       * <code>repeated int32 absentElementIndices = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getAbsentElementIndicesList() {
        return java.util.Collections.unmodifiableList(absentElementIndices_);
      }
      /**
       * <pre>
       * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
       * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
       * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
       * </pre>
       *
       * <code>repeated int32 absentElementIndices = 5;</code>
       */
      public int getAbsentElementIndicesCount() {
        return absentElementIndices_.size();
      }
      /**
       * <pre>
       * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
       * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
       * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
       * </pre>
       *
       * <code>repeated int32 absentElementIndices = 5;</code>
       */
      public int getAbsentElementIndices(int index) {
        return absentElementIndices_.get(index);
      }
      /**
       * <pre>
       * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
       * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
       * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
       * </pre>
       *
       * <code>repeated int32 absentElementIndices = 5;</code>
       */
      public Builder setAbsentElementIndices(
          int index, int value) {
        ensureAbsentElementIndicesIsMutable();
        absentElementIndices_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
       * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
       * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
       * </pre>
       *
       * <code>repeated int32 absentElementIndices = 5;</code>
       */
      public Builder addAbsentElementIndices(int value) {
        ensureAbsentElementIndicesIsMutable();
        absentElementIndices_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
       * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
       * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
       * </pre>
       *
       * <code>repeated int32 absentElementIndices = 5;</code>
       */
      public Builder addAllAbsentElementIndices(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAbsentElementIndicesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, absentElementIndices_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
       * thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
       * `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
       * </pre>
       *
       * <code>repeated int32 absentElementIndices = 5;</code>
       */
      public Builder clearAbsentElementIndices() {
        absentElementIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private boolean empty_ ;
      /**
       * <pre>
       * Set to true if there are no elements whatsoever in this DimensionElements. In that case `fields`,
       * `absentFieldColumnIndices` and `absentElementsIndices` will all be empty.
       * </pre>
       *
       * <code>optional bool empty = 6;</code>
       */
      public boolean getEmpty() {
        return empty_;
      }
      /**
       * <pre>
       * Set to true if there are no elements whatsoever in this DimensionElements. In that case `fields`,
       * `absentFieldColumnIndices` and `absentElementsIndices` will all be empty.
       * </pre>
       *
       * <code>optional bool empty = 6;</code>
       */
      public Builder setEmpty(boolean value) {
        
        empty_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set to true if there are no elements whatsoever in this DimensionElements. In that case `fields`,
       * `absentFieldColumnIndices` and `absentElementsIndices` will all be empty.
       * </pre>
       *
       * <code>optional bool empty = 6;</code>
       */
      public Builder clearEmpty() {
        
        empty_ = false;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * if perSample is set we are in mode 3, there is an individual element for each observation
       * </pre>
       *
       * <code>optional bool perSample = 2;</code>
       */
      public boolean getPerSample() {
        if (scopeCase_ == 2) {
          return (java.lang.Boolean) scope_;
        }
        return false;
      }
      /**
       * <pre>
       * if perSample is set we are in mode 3, there is an individual element for each observation
       * </pre>
       *
       * <code>optional bool perSample = 2;</code>
       */
      public Builder setPerSample(boolean value) {
        scopeCase_ = 2;
        scope_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if perSample is set we are in mode 3, there is an individual element for each observation
       * </pre>
       *
       * <code>optional bool perSample = 2;</code>
       */
      public Builder clearPerSample() {
        if (scopeCase_ == 2) {
          scopeCase_ = 0;
          scope_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * if perPackedCell is set we are in mode 1. This DimensionElements contains only a single element, which
       * applies to all observations in the packedCell
       * </pre>
       *
       * <code>optional bool perPackedCell = 7;</code>
       */
      public boolean getPerPackedCell() {
        if (scopeCase_ == 7) {
          return (java.lang.Boolean) scope_;
        }
        return false;
      }
      /**
       * <pre>
       * if perPackedCell is set we are in mode 1. This DimensionElements contains only a single element, which
       * applies to all observations in the packedCell
       * </pre>
       *
       * <code>optional bool perPackedCell = 7;</code>
       */
      public Builder setPerPackedCell(boolean value) {
        scopeCase_ = 7;
        scope_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if perPackedCell is set we are in mode 1. This DimensionElements contains only a single element, which
       * applies to all observations in the packedCell
       * </pre>
       *
       * <code>optional bool perPackedCell = 7;</code>
       */
      public Builder clearPerPackedCell() {
        if (scopeCase_ == 7) {
          scopeCase_ = 0;
          scope_ = null;
          onChanged();
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.DimensionElements)
    }

    // @@protoc_insertion_point(class_scope:hypercube.DimensionElements)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DimensionElements>
        PARSER = new com.google.protobuf.AbstractParser<DimensionElements>() {
      public DimensionElements parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DimensionElements(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DimensionElements> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DimensionElements> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElements getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DimensionElementFieldColumnOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.DimensionElementFieldColumn)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    java.util.List<java.lang.String>
        getStringValueList();
    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    int getStringValueCount();
    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    java.lang.String getStringValue(int index);
    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    com.google.protobuf.ByteString
        getStringValueBytes(int index);

    /**
     * <code>repeated double doubleValue = 2;</code>
     */
    java.util.List<java.lang.Double> getDoubleValueList();
    /**
     * <code>repeated double doubleValue = 2;</code>
     */
    int getDoubleValueCount();
    /**
     * <code>repeated double doubleValue = 2;</code>
     */
    double getDoubleValue(int index);

    /**
     * <code>repeated sint64 intValue = 3;</code>
     */
    java.util.List<java.lang.Long> getIntValueList();
    /**
     * <code>repeated sint64 intValue = 3;</code>
     */
    int getIntValueCount();
    /**
     * <code>repeated sint64 intValue = 3;</code>
     */
    long getIntValue(int index);

    /**
     * <code>repeated int64 timestampValue = 4;</code>
     */
    java.util.List<java.lang.Long> getTimestampValueList();
    /**
     * <code>repeated int64 timestampValue = 4;</code>
     */
    int getTimestampValueCount();
    /**
     * <code>repeated int64 timestampValue = 4;</code>
     */
    long getTimestampValue(int index);

    /**
     * <code>repeated int32 absentValueIndices = 5;</code>
     */
    java.util.List<java.lang.Integer> getAbsentValueIndicesList();
    /**
     * <code>repeated int32 absentValueIndices = 5;</code>
     */
    int getAbsentValueIndicesCount();
    /**
     * <code>repeated int32 absentValueIndices = 5;</code>
     */
    int getAbsentValueIndices(int index);
  }
  /**
   * Protobuf type {@code hypercube.DimensionElementFieldColumn}
   */
  public  static final class DimensionElementFieldColumn extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.DimensionElementFieldColumn)
      DimensionElementFieldColumnOrBuilder {
    // Use DimensionElementFieldColumn.newBuilder() to construct.
    private DimensionElementFieldColumn(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DimensionElementFieldColumn() {
      stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      doubleValue_ = java.util.Collections.emptyList();
      intValue_ = java.util.Collections.emptyList();
      timestampValue_ = java.util.Collections.emptyList();
      absentValueIndices_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DimensionElementFieldColumn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                stringValue_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              stringValue_.add(s);
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                doubleValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              doubleValue_.add(input.readDouble());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                doubleValue_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleValue_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                intValue_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              intValue_.add(input.readSInt64());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                intValue_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                intValue_.add(input.readSInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                timestampValue_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              timestampValue_.add(input.readInt64());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                timestampValue_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                timestampValue_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                absentValueIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              absentValueIndices_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                absentValueIndices_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                absentValueIndices_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          stringValue_ = stringValue_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          doubleValue_ = java.util.Collections.unmodifiableList(doubleValue_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          intValue_ = java.util.Collections.unmodifiableList(intValue_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          timestampValue_ = java.util.Collections.unmodifiableList(timestampValue_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          absentValueIndices_ = java.util.Collections.unmodifiableList(absentValueIndices_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElementFieldColumn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElementFieldColumn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder.class);
    }

    public static final int STRINGVALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList stringValue_;
    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getStringValueList() {
      return stringValue_;
    }
    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    public int getStringValueCount() {
      return stringValue_.size();
    }
    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    public java.lang.String getStringValue(int index) {
      return stringValue_.get(index);
    }
    /**
     * <pre>
     * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
     * </pre>
     *
     * <code>repeated string stringValue = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStringValueBytes(int index) {
      return stringValue_.getByteString(index);
    }

    public static final int DOUBLEVALUE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Double> doubleValue_;
    /**
     * <code>repeated double doubleValue = 2;</code>
     */
    public java.util.List<java.lang.Double>
        getDoubleValueList() {
      return doubleValue_;
    }
    /**
     * <code>repeated double doubleValue = 2;</code>
     */
    public int getDoubleValueCount() {
      return doubleValue_.size();
    }
    /**
     * <code>repeated double doubleValue = 2;</code>
     */
    public double getDoubleValue(int index) {
      return doubleValue_.get(index);
    }
    private int doubleValueMemoizedSerializedSize = -1;

    public static final int INTVALUE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Long> intValue_;
    /**
     * <code>repeated sint64 intValue = 3;</code>
     */
    public java.util.List<java.lang.Long>
        getIntValueList() {
      return intValue_;
    }
    /**
     * <code>repeated sint64 intValue = 3;</code>
     */
    public int getIntValueCount() {
      return intValue_.size();
    }
    /**
     * <code>repeated sint64 intValue = 3;</code>
     */
    public long getIntValue(int index) {
      return intValue_.get(index);
    }
    private int intValueMemoizedSerializedSize = -1;

    public static final int TIMESTAMPVALUE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Long> timestampValue_;
    /**
     * <code>repeated int64 timestampValue = 4;</code>
     */
    public java.util.List<java.lang.Long>
        getTimestampValueList() {
      return timestampValue_;
    }
    /**
     * <code>repeated int64 timestampValue = 4;</code>
     */
    public int getTimestampValueCount() {
      return timestampValue_.size();
    }
    /**
     * <code>repeated int64 timestampValue = 4;</code>
     */
    public long getTimestampValue(int index) {
      return timestampValue_.get(index);
    }
    private int timestampValueMemoizedSerializedSize = -1;

    public static final int ABSENTVALUEINDICES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> absentValueIndices_;
    /**
     * <code>repeated int32 absentValueIndices = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getAbsentValueIndicesList() {
      return absentValueIndices_;
    }
    /**
     * <code>repeated int32 absentValueIndices = 5;</code>
     */
    public int getAbsentValueIndicesCount() {
      return absentValueIndices_.size();
    }
    /**
     * <code>repeated int32 absentValueIndices = 5;</code>
     */
    public int getAbsentValueIndices(int index) {
      return absentValueIndices_.get(index);
    }
    private int absentValueIndicesMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < stringValue_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stringValue_.getRaw(i));
      }
      if (getDoubleValueList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(doubleValueMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleValue_.size(); i++) {
        output.writeDoubleNoTag(doubleValue_.get(i));
      }
      if (getIntValueList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(intValueMemoizedSerializedSize);
      }
      for (int i = 0; i < intValue_.size(); i++) {
        output.writeSInt64NoTag(intValue_.get(i));
      }
      if (getTimestampValueList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(timestampValueMemoizedSerializedSize);
      }
      for (int i = 0; i < timestampValue_.size(); i++) {
        output.writeInt64NoTag(timestampValue_.get(i));
      }
      if (getAbsentValueIndicesList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(absentValueIndicesMemoizedSerializedSize);
      }
      for (int i = 0; i < absentValueIndices_.size(); i++) {
        output.writeInt32NoTag(absentValueIndices_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < stringValue_.size(); i++) {
          dataSize += computeStringSizeNoTag(stringValue_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringValueList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleValueList().size();
        size += dataSize;
        if (!getDoubleValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < intValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt64SizeNoTag(intValue_.get(i));
        }
        size += dataSize;
        if (!getIntValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        intValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < timestampValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(timestampValue_.get(i));
        }
        size += dataSize;
        if (!getTimestampValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        timestampValueMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < absentValueIndices_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(absentValueIndices_.get(i));
        }
        size += dataSize;
        if (!getAbsentValueIndicesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        absentValueIndicesMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn) obj;

      boolean result = true;
      result = result && getStringValueList()
          .equals(other.getStringValueList());
      result = result && getDoubleValueList()
          .equals(other.getDoubleValueList());
      result = result && getIntValueList()
          .equals(other.getIntValueList());
      result = result && getTimestampValueList()
          .equals(other.getTimestampValueList());
      result = result && getAbsentValueIndicesList()
          .equals(other.getAbsentValueIndicesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getStringValueCount() > 0) {
        hash = (37 * hash) + STRINGVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getStringValueList().hashCode();
      }
      if (getDoubleValueCount() > 0) {
        hash = (37 * hash) + DOUBLEVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getDoubleValueList().hashCode();
      }
      if (getIntValueCount() > 0) {
        hash = (37 * hash) + INTVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getIntValueList().hashCode();
      }
      if (getTimestampValueCount() > 0) {
        hash = (37 * hash) + TIMESTAMPVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getTimestampValueList().hashCode();
      }
      if (getAbsentValueIndicesCount() > 0) {
        hash = (37 * hash) + ABSENTVALUEINDICES_FIELD_NUMBER;
        hash = (53 * hash) + getAbsentValueIndicesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hypercube.DimensionElementFieldColumn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.DimensionElementFieldColumn)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumnOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElementFieldColumn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElementFieldColumn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        doubleValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        intValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        timestampValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        absentValueIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_DimensionElementFieldColumn_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          stringValue_ = stringValue_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.stringValue_ = stringValue_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          doubleValue_ = java.util.Collections.unmodifiableList(doubleValue_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.doubleValue_ = doubleValue_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          intValue_ = java.util.Collections.unmodifiableList(intValue_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.intValue_ = intValue_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          timestampValue_ = java.util.Collections.unmodifiableList(timestampValue_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.timestampValue_ = timestampValue_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          absentValueIndices_ = java.util.Collections.unmodifiableList(absentValueIndices_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.absentValueIndices_ = absentValueIndices_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn.getDefaultInstance()) return this;
        if (!other.stringValue_.isEmpty()) {
          if (stringValue_.isEmpty()) {
            stringValue_ = other.stringValue_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureStringValueIsMutable();
            stringValue_.addAll(other.stringValue_);
          }
          onChanged();
        }
        if (!other.doubleValue_.isEmpty()) {
          if (doubleValue_.isEmpty()) {
            doubleValue_ = other.doubleValue_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureDoubleValueIsMutable();
            doubleValue_.addAll(other.doubleValue_);
          }
          onChanged();
        }
        if (!other.intValue_.isEmpty()) {
          if (intValue_.isEmpty()) {
            intValue_ = other.intValue_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureIntValueIsMutable();
            intValue_.addAll(other.intValue_);
          }
          onChanged();
        }
        if (!other.timestampValue_.isEmpty()) {
          if (timestampValue_.isEmpty()) {
            timestampValue_ = other.timestampValue_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTimestampValueIsMutable();
            timestampValue_.addAll(other.timestampValue_);
          }
          onChanged();
        }
        if (!other.absentValueIndices_.isEmpty()) {
          if (absentValueIndices_.isEmpty()) {
            absentValueIndices_ = other.absentValueIndices_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureAbsentValueIndicesIsMutable();
            absentValueIndices_.addAll(other.absentValueIndices_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringValueIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          stringValue_ = new com.google.protobuf.LazyStringArrayList(stringValue_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getStringValueList() {
        return stringValue_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public int getStringValueCount() {
        return stringValue_.size();
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public java.lang.String getStringValue(int index) {
        return stringValue_.get(index);
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes(int index) {
        return stringValue_.getByteString(index);
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public Builder setStringValue(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public Builder addStringValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringValueIsMutable();
        stringValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public Builder addAllStringValue(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stringValue_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public Builder clearStringValue() {
        stringValue_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
       * </pre>
       *
       * <code>repeated string stringValue = 1;</code>
       */
      public Builder addStringValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureStringValueIsMutable();
        stringValue_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Double> doubleValue_ = java.util.Collections.emptyList();
      private void ensureDoubleValueIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          doubleValue_ = new java.util.ArrayList<java.lang.Double>(doubleValue_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated double doubleValue = 2;</code>
       */
      public java.util.List<java.lang.Double>
          getDoubleValueList() {
        return java.util.Collections.unmodifiableList(doubleValue_);
      }
      /**
       * <code>repeated double doubleValue = 2;</code>
       */
      public int getDoubleValueCount() {
        return doubleValue_.size();
      }
      /**
       * <code>repeated double doubleValue = 2;</code>
       */
      public double getDoubleValue(int index) {
        return doubleValue_.get(index);
      }
      /**
       * <code>repeated double doubleValue = 2;</code>
       */
      public Builder setDoubleValue(
          int index, double value) {
        ensureDoubleValueIsMutable();
        doubleValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubleValue = 2;</code>
       */
      public Builder addDoubleValue(double value) {
        ensureDoubleValueIsMutable();
        doubleValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubleValue = 2;</code>
       */
      public Builder addAllDoubleValue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, doubleValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubleValue = 2;</code>
       */
      public Builder clearDoubleValue() {
        doubleValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> intValue_ = java.util.Collections.emptyList();
      private void ensureIntValueIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          intValue_ = new java.util.ArrayList<java.lang.Long>(intValue_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated sint64 intValue = 3;</code>
       */
      public java.util.List<java.lang.Long>
          getIntValueList() {
        return java.util.Collections.unmodifiableList(intValue_);
      }
      /**
       * <code>repeated sint64 intValue = 3;</code>
       */
      public int getIntValueCount() {
        return intValue_.size();
      }
      /**
       * <code>repeated sint64 intValue = 3;</code>
       */
      public long getIntValue(int index) {
        return intValue_.get(index);
      }
      /**
       * <code>repeated sint64 intValue = 3;</code>
       */
      public Builder setIntValue(
          int index, long value) {
        ensureIntValueIsMutable();
        intValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 intValue = 3;</code>
       */
      public Builder addIntValue(long value) {
        ensureIntValueIsMutable();
        intValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 intValue = 3;</code>
       */
      public Builder addAllIntValue(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureIntValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, intValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint64 intValue = 3;</code>
       */
      public Builder clearIntValue() {
        intValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> timestampValue_ = java.util.Collections.emptyList();
      private void ensureTimestampValueIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          timestampValue_ = new java.util.ArrayList<java.lang.Long>(timestampValue_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int64 timestampValue = 4;</code>
       */
      public java.util.List<java.lang.Long>
          getTimestampValueList() {
        return java.util.Collections.unmodifiableList(timestampValue_);
      }
      /**
       * <code>repeated int64 timestampValue = 4;</code>
       */
      public int getTimestampValueCount() {
        return timestampValue_.size();
      }
      /**
       * <code>repeated int64 timestampValue = 4;</code>
       */
      public long getTimestampValue(int index) {
        return timestampValue_.get(index);
      }
      /**
       * <code>repeated int64 timestampValue = 4;</code>
       */
      public Builder setTimestampValue(
          int index, long value) {
        ensureTimestampValueIsMutable();
        timestampValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 timestampValue = 4;</code>
       */
      public Builder addTimestampValue(long value) {
        ensureTimestampValueIsMutable();
        timestampValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 timestampValue = 4;</code>
       */
      public Builder addAllTimestampValue(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureTimestampValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, timestampValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 timestampValue = 4;</code>
       */
      public Builder clearTimestampValue() {
        timestampValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> absentValueIndices_ = java.util.Collections.emptyList();
      private void ensureAbsentValueIndicesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          absentValueIndices_ = new java.util.ArrayList<java.lang.Integer>(absentValueIndices_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 absentValueIndices = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getAbsentValueIndicesList() {
        return java.util.Collections.unmodifiableList(absentValueIndices_);
      }
      /**
       * <code>repeated int32 absentValueIndices = 5;</code>
       */
      public int getAbsentValueIndicesCount() {
        return absentValueIndices_.size();
      }
      /**
       * <code>repeated int32 absentValueIndices = 5;</code>
       */
      public int getAbsentValueIndices(int index) {
        return absentValueIndices_.get(index);
      }
      /**
       * <code>repeated int32 absentValueIndices = 5;</code>
       */
      public Builder setAbsentValueIndices(
          int index, int value) {
        ensureAbsentValueIndicesIsMutable();
        absentValueIndices_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 absentValueIndices = 5;</code>
       */
      public Builder addAbsentValueIndices(int value) {
        ensureAbsentValueIndicesIsMutable();
        absentValueIndices_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 absentValueIndices = 5;</code>
       */
      public Builder addAllAbsentValueIndices(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAbsentValueIndicesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, absentValueIndices_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 absentValueIndices = 5;</code>
       */
      public Builder clearAbsentValueIndices() {
        absentValueIndices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.DimensionElementFieldColumn)
    }

    // @@protoc_insertion_point(class_scope:hypercube.DimensionElementFieldColumn)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DimensionElementFieldColumn>
        PARSER = new com.google.protobuf.AbstractParser<DimensionElementFieldColumn>() {
      public DimensionElementFieldColumn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DimensionElementFieldColumn(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DimensionElementFieldColumn> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DimensionElementFieldColumn> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.DimensionElementFieldColumn getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:hypercube.Error)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    java.lang.String getError();
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    com.google.protobuf.ByteString
        getErrorBytes();
  }
  /**
   * <pre>
   * This message is a generic error message that can be sent in place of any of the other root messages.
   * As long as the error field in all interchanged messages (Header, Cell, PackedCell, Footer, Error) has the same type
   * and number, this message can be interchanged with the other root message types.
   * </pre>
   *
   * Protobuf type {@code hypercube.Error}
   */
  public  static final class Error extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:hypercube.Error)
      ErrorOrBuilder {
    // Use Error.newBuilder() to construct.
    private Error(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Error() {
      error_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Error(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 794: {
              java.lang.String s = input.readStringRequireUtf8();

              error_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Error_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Error_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.transmartproject.rest.hypercubeProto.ObservationsProto.Error.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Error.Builder.class);
    }

    public static final int ERROR_FIELD_NUMBER = 99;
    private volatile java.lang.Object error_;
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public java.lang.String getError() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        error_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * see Header.error
     * </pre>
     *
     * <code>optional string error = 99;</code>
     */
    public com.google.protobuf.ByteString
        getErrorBytes() {
      java.lang.Object ref = error_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        error_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getErrorBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 99, error_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getErrorBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(99, error_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Error)) {
        return super.equals(obj);
      }
      org.transmartproject.rest.hypercubeProto.ObservationsProto.Error other = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Error) obj;

      boolean result = true;
      result = result && getError()
          .equals(other.getError());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.transmartproject.rest.hypercubeProto.ObservationsProto.Error prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This message is a generic error message that can be sent in place of any of the other root messages.
     * As long as the error field in all interchanged messages (Header, Cell, PackedCell, Footer, Error) has the same type
     * and number, this message can be interchanged with the other root message types.
     * </pre>
     *
     * Protobuf type {@code hypercube.Error}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:hypercube.Error)
        org.transmartproject.rest.hypercubeProto.ObservationsProto.ErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Error_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Error_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.transmartproject.rest.hypercubeProto.ObservationsProto.Error.class, org.transmartproject.rest.hypercubeProto.ObservationsProto.Error.Builder.class);
      }

      // Construct using org.transmartproject.rest.hypercubeProto.ObservationsProto.Error.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        error_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.internal_static_hypercube_Error_descriptor;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Error getDefaultInstanceForType() {
        return org.transmartproject.rest.hypercubeProto.ObservationsProto.Error.getDefaultInstance();
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Error build() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Error result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.transmartproject.rest.hypercubeProto.ObservationsProto.Error buildPartial() {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Error result = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Error(this);
        result.error_ = error_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.transmartproject.rest.hypercubeProto.ObservationsProto.Error) {
          return mergeFrom((org.transmartproject.rest.hypercubeProto.ObservationsProto.Error)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.transmartproject.rest.hypercubeProto.ObservationsProto.Error other) {
        if (other == org.transmartproject.rest.hypercubeProto.ObservationsProto.Error.getDefaultInstance()) return this;
        if (!other.getError().isEmpty()) {
          error_ = other.error_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.transmartproject.rest.hypercubeProto.ObservationsProto.Error parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.transmartproject.rest.hypercubeProto.ObservationsProto.Error) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object error_ = "";
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public java.lang.String getError() {
        java.lang.Object ref = error_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          error_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public com.google.protobuf.ByteString
          getErrorBytes() {
        java.lang.Object ref = error_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          error_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder clearError() {
        
        error_ = getDefaultInstance().getError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * see Header.error
       * </pre>
       *
       * <code>optional string error = 99;</code>
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        error_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:hypercube.Error)
    }

    // @@protoc_insertion_point(class_scope:hypercube.Error)
    private static final org.transmartproject.rest.hypercubeProto.ObservationsProto.Error DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.transmartproject.rest.hypercubeProto.ObservationsProto.Error();
    }

    public static org.transmartproject.rest.hypercubeProto.ObservationsProto.Error getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Error>
        PARSER = new com.google.protobuf.AbstractParser<Error>() {
      public Error parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Error(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Error> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Error> getParserForType() {
      return PARSER;
    }

    public org.transmartproject.rest.hypercubeProto.ObservationsProto.Error getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_Header_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_Header_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_DimensionDeclaration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_DimensionDeclaration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_FieldDefinition_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_FieldDefinition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_Cell_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_Cell_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_PackedCell_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_PackedCell_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_DimensionElement_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_DimensionElement_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_Value_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_Value_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_Footer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_Footer_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_DimensionElements_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_DimensionElements_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_DimensionElementFieldColumn_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_DimensionElementFieldColumn_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_hypercube_Error_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_hypercube_Error_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"src/protobuf/v2/observations.proto\022\thy" +
      "percube\"e\n\006Header\022>\n\025dimensionDeclaratio" +
      "ns\030\001 \003(\0132\037.hypercube.DimensionDeclaratio" +
      "n\022\014\n\004last\030\002 \001(\010\022\r\n\005error\030c \001(\t\"\277\001\n\024Dimen" +
      "sionDeclaration\022\014\n\004name\030\001 \001(\t\022\035\n\004type\030\002 " +
      "\001(\0162\017.hypercube.Type\022*\n\006fields\030\003 \003(\0132\032.h" +
      "ypercube.FieldDefinition\022\016\n\006inline\030\004 \001(\010" +
      "\022\016\n\006packed\030\005 \001(\010\022.\n\010elements\030\006 \001(\0132\034.hyp" +
      "ercube.DimensionElements\">\n\017FieldDefinit" +
      "ion\022\014\n\004name\030\001 \001(\t\022\035\n\004type\030\002 \001(\0162\017.hyperc",
      "ube.Type\"\314\001\n\004Cell\022\030\n\020dimensionIndexes\030\001 " +
      "\003(\003\0225\n\020inlineDimensions\030\002 \003(\0132\033.hypercub" +
      "e.DimensionElement\022\036\n\026absentInlineDimens" +
      "ions\030\005 \003(\005\022\025\n\013stringValue\030\003 \001(\tH\000\022\026\n\014num" +
      "ericValue\030\004 \001(\001H\000\022\014\n\004last\030\007 \001(\010\022\r\n\005error" +
      "\030c \001(\tB\007\n\005value\"\356\001\n\nPackedCell\022\030\n\020dimens" +
      "ionIndexes\030\001 \003(\003\0226\n\020inlineDimensions\030\002 \003" +
      "(\0132\034.hypercube.DimensionElements\022\024\n\014stri" +
      "ngValues\030\003 \003(\t\022\025\n\rnumericValues\030\004 \003(\001\022\030\n" +
      "\020nullElementCount\030\010 \001(\005\022\024\n\014sampleCounts\030",
      "\005 \003(\005\022\024\n\014absentValues\030\006 \003(\005\022\014\n\004last\030\007 \001(" +
      "\010\022\r\n\005error\030c \001(\t\"\244\001\n\020DimensionElement\022 \n" +
      "\006fields\030\001 \003(\0132\020.hypercube.Value\022\020\n\010intVa" +
      "lue\030\002 \001(\022\022\023\n\013doubleValue\030\003 \001(\001\022\023\n\013string" +
      "Value\030\004 \001(\t\022\026\n\016timestampValue\030\005 \001(\003\022\032\n\022a" +
      "bsentFieldIndices\030\006 \003(\005\"l\n\005Value\022\025\n\013stri" +
      "ngValue\030\001 \001(\tH\000\022\025\n\013doubleValue\030\002 \001(\001H\000\022\022" +
      "\n\010intValue\030\003 \001(\022H\000\022\030\n\016timestampValue\030\004 \001" +
      "(\003H\000B\007\n\005value\"H\n\006Footer\022/\n\tdimension\030\001 \003" +
      "(\0132\034.hypercube.DimensionElements\022\r\n\005erro",
      "r\030c \001(\t\"\337\001\n\021DimensionElements\022\014\n\004name\030\003 " +
      "\001(\t\0226\n\006fields\030\001 \003(\0132&.hypercube.Dimensio" +
      "nElementFieldColumn\022 \n\030absentFieldColumn" +
      "Indices\030\004 \003(\005\022\034\n\024absentElementIndices\030\005 " +
      "\003(\005\022\r\n\005empty\030\006 \001(\010\022\023\n\tperSample\030\002 \001(\010H\000\022" +
      "\027\n\rperPackedCell\030\007 \001(\010H\000B\007\n\005scope\"\215\001\n\033Di" +
      "mensionElementFieldColumn\022\023\n\013stringValue" +
      "\030\001 \003(\t\022\023\n\013doubleValue\030\002 \003(\001\022\020\n\010intValue\030" +
      "\003 \003(\022\022\026\n\016timestampValue\030\004 \003(\003\022\032\n\022absentV" +
      "alueIndices\030\005 \003(\005\"\026\n\005Error\022\r\n\005error\030c \001(",
      "\t*B\n\004Type\022\n\n\006DOUBLE\020\000\022\n\n\006STRING\020\001\022\007\n\003INT" +
      "\020\002\022\r\n\tTIMESTAMP\020\003\022\n\n\006OBJECT\020\004B=\n(org.tra" +
      "nsmartproject.rest.hypercubeProtoB\021Obser" +
      "vationsProtob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_hypercube_Header_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_hypercube_Header_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_Header_descriptor,
        new java.lang.String[] { "DimensionDeclarations", "Last", "Error", });
    internal_static_hypercube_DimensionDeclaration_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_hypercube_DimensionDeclaration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_DimensionDeclaration_descriptor,
        new java.lang.String[] { "Name", "Type", "Fields", "Inline", "Packed", "Elements", });
    internal_static_hypercube_FieldDefinition_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_hypercube_FieldDefinition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_FieldDefinition_descriptor,
        new java.lang.String[] { "Name", "Type", });
    internal_static_hypercube_Cell_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_hypercube_Cell_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_Cell_descriptor,
        new java.lang.String[] { "DimensionIndexes", "InlineDimensions", "AbsentInlineDimensions", "StringValue", "NumericValue", "Last", "Error", "Value", });
    internal_static_hypercube_PackedCell_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_hypercube_PackedCell_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_PackedCell_descriptor,
        new java.lang.String[] { "DimensionIndexes", "InlineDimensions", "StringValues", "NumericValues", "NullElementCount", "SampleCounts", "AbsentValues", "Last", "Error", });
    internal_static_hypercube_DimensionElement_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_hypercube_DimensionElement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_DimensionElement_descriptor,
        new java.lang.String[] { "Fields", "IntValue", "DoubleValue", "StringValue", "TimestampValue", "AbsentFieldIndices", });
    internal_static_hypercube_Value_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_hypercube_Value_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_Value_descriptor,
        new java.lang.String[] { "StringValue", "DoubleValue", "IntValue", "TimestampValue", "Value", });
    internal_static_hypercube_Footer_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_hypercube_Footer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_Footer_descriptor,
        new java.lang.String[] { "Dimension", "Error", });
    internal_static_hypercube_DimensionElements_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_hypercube_DimensionElements_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_DimensionElements_descriptor,
        new java.lang.String[] { "Name", "Fields", "AbsentFieldColumnIndices", "AbsentElementIndices", "Empty", "PerSample", "PerPackedCell", "Scope", });
    internal_static_hypercube_DimensionElementFieldColumn_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_hypercube_DimensionElementFieldColumn_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_DimensionElementFieldColumn_descriptor,
        new java.lang.String[] { "StringValue", "DoubleValue", "IntValue", "TimestampValue", "AbsentValueIndices", });
    internal_static_hypercube_Error_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_hypercube_Error_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_hypercube_Error_descriptor,
        new java.lang.String[] { "Error", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
