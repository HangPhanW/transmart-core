syntax = "proto3";
package hypercube;

// NB: this package is used in transmart-rest-api but also through a symlink in transmart-rest-api-e2e
// If you change the java package or class name, also update the transmart-rest-api-e2e usages of this!
option java_package = "org.transmartproject.rest.hypercubeProto";
option java_outer_classname = "ObservationsProto";


// Command to generate the java code: (executed in transmart-rest-api/)
// protoc --java_out=src/main/groovy/ src/protobuf/v2/observations.proto

// A full hypercube is a series of messages, each prefixed by its length in the protobuf varint encoding. A hypercube
// starts with a header, then one or more observations or one or more packedObservations (depending on if there is a
// dimension marked 'packed'), and then one footer. If the `last` field in Header, Cell or PackedCell is true no more
// cells will follow and the next message is the Footer.

// If an unexpected error occurs on the server while streaming a hypercube, an Error message can be sent instead of any
// of the other root message types. To a parser this will look like the expected root message type with only its `error`
// field set. If this happens the entire hypercube result should be treated as corrupted and discarded. The `error`
// string will contain the error message.
// Sending an Error message should be a last resort, any errors that a server can detect before starting to stream the
// hypercube should be detected and handled by a more appropriate error mechanism such as returning an HTTP 5xx status
// code.

// This format uses indexes into other fields in several places. These indexes are 1-based. This leaves a 0 value to
// indicate `not present` or `null`. This is only used in the dimensionIndexes field in Cell and PackedCell. To maintain
// consistency all other index fields are also 1-based.

enum Type {
    DOUBLE = 0;
    STRING = 1;
    INT = 2;
    TIMESTAMP = 3;
    OBJECT = 4;
}

message Header { // header is sent without chunking in a one message
    repeated DimensionDeclaration dimensionDeclarations = 1;
    // same meaning as in Observation
    bool last = 2; //default: false


    // If an error happens while streaming of the result has already started, this field can be set with the error message.
    // If so, the client should stop parsing the rest of the stream and consider the result corrupt. An error in one of
    // these error fields generally indicates an internal application bug or a database consistency issue. Any errors
    // that can be detected before writing to the response stream has started will be and will cause an HTTP error
    // to be returned with a textual or json error message in the body.
    string error = 99;
}

message DimensionDeclaration {
    // each dimension present in the output is declared with this message
    string name = 1;
    /* A description of the elements of the dimension. 'fields' is only set if type is
    OBJECT */
    Type type = 2;
    repeated FieldDefinition fields = 3;
    /* If true, the dimension elements will be stored in the
      observation cell instead of the footer. */
    bool inline = 4;
    /* If true, observations are packed along this dimension. Only one dimension can have
    this flag set, and this flag is mutually exclusive with the 'inline' flag.*/
    bool packed = 5;
    /* Only used if the dimension elements are sent in the header instead of the footer. */
    DimensionElements elements = 6;
}

message FieldDefinition {
    // A field of a DimensionElement. This only applies to dimensions that have type OBJECT.
    // This message defines the name and type of a DimensionElement field or a DimensionElements.fields field column.
    // Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
    // age, gender, race, etc.
    string name = 1;
    // In the current protobuf version, this must be a non-compound type, so this cannot be OBJECT
    // (Support for nested compound types could be added in the future)
    Type type = 2;
}

message Cell {
    // This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
    // dimension along which observations are packed, if packing is used) and follows their
    // order. The value is the index into the dimElementField value. The index is 1-based to reserve the 0 for
    // 'not present'.
    repeated int64 dimensionIndexes = 1; // `packed` is the default in proto3

    // A single element for each inline dimension, in the order used in the header. Absent dimensions are skipped.
    repeated DimensionElement inlineDimensions = 2;
    // indexes of absent dimensions (1-based)
    repeated int32 absentInlineDimensions = 5;

    oneof value {
        string stringValue = 3;
        double numericValue = 4;
    }

    // Set to true on the last observation, the last observation is followed by a footer.
    bool last = 7; // [default=false];


    // see Header.error
    string error = 99;
}

message PackedCell {
    // same as in observation
    repeated int64 dimensionIndexes = 1;
    // A dimension element for each observation for each inline dimension
    // The perSample flag indicates if there is one element for each sample, or only one element for each group of
    // samples corresponding to a single element of the packed dimension (e.g. one element per patient even though there
    // can be multiple samples per patient).
    repeated DimensionElements inlineDimensions = 2;

    // Only one of these must be set
    // This list are the observation values. If there are multiple samples this list can be longer than the number of
    // elements in the packed dimension. The list starts with observations for which the packed dimension is null,
    // the number of which is indicated by the nullElementCount value.
    //
    // The number of accounted-for values (i.e. what is in stringValue/numericValue plus the number of absent values
    // indicated by absentValues/sampleCounts may be less than the number of packed dimension elements. In that case any
    // not accounted for values are absent.
    repeated string stringValues = 3;
    repeated double numericValues = 4;

    // 1-based indices of missing/null values. Note that Transmart currently has no or very limited support for having
    // null valued observations. This field exists to support null values if Transmart will change in this respect in
    // the future, but do not expect this field to be populated with current (version 17+) versions.
    // The difference between this field and `absentValues` is that for value indexes in `nullValueIndices`, there
    // are still inline dimensions, while for absentValues there are not.
    repeated int32 nullValueIndices = 8;

    // The number of values for which the packed dimension is null. These are prepended to the list of values.
    int32 nullElementCount = 9;

    // Only one of these must be present.
    //
    // If for some element of the packed dimension there are multiple samples (e.g. because the study data contains
    // multiple samples, or because some dimensions that differentiate the samples are not retrieved) the sampleCounts
    // must be set. The length of the sampleCounts array is the same as the number of elements in the packed dimension.
    // Each value in sampleCounts indicates the number of samples for each respective packed dimension element.
    //
    // If for each packed dimension element there are only zero or one value, the absentValues array should be used.
    // contains the indexes of the dimension elements for which no value is present, similar to other absentXxx fields.
    // This field is 1-based.
    //
    // If neither are set, the array of values corresponds one-to-one to the packed dimension elements
    //
    // In either case the stringValues or numericValues contain all the values that are present concatenated together
    // in order.
    repeated int32 sampleCounts = 5;
    repeated int32 absentValues = 6;

    bool last = 7; // default: false

    // see Header.error
    string error = 99;
}

// note: singular
message DimensionElement {
    // Only one of these can be set. If this dimension element is a primitive (non-OBJECT), use the
    // int/double/stringValues. If this dimension element is compound (of type OBJECT), use 'fields'.
    // Having the optional fields as well is a size optimization, it avoids the overhead of a repeated field and a
    // nested message for every inline dimension in each observation.
    repeated Value fields = 1;
    oneof value {
        // `fields` should also go in here, but `oneof` does not work for repeated fields.
        sint64 intValue = 2;
        double doubleValue = 3;
        string stringValue = 4;
        int64 timestampValue = 5;
    }

    // 1-based list of indices of fields that are absent
    repeated int32 absentFieldIndices = 6;
}

message Value {
    oneof value {
        string stringValue = 1;
        double doubleValue = 2;
        sint64 intValue = 3;
        int64 timestampValue = 4;
    }
}


message Footer {
    // List of dimensions (e.g. patients, concepts, trialVisits, etc)
    repeated DimensionElements dimension = 1;


    // see Header.error
    string error = 99;
}

// note: plural
message DimensionElements { // Multiple dimension elements are stored in a "column oriented" format, with the fields
                            // as the columns.

    // not used when a DimensionElements is embedded in a PackedObservation
    string name = 3;

    // List of dimension elements field values (e.g. values for age, values for gender, etc). If values for a certain
    // field are absent on all encoded dimension elements, that list of field values is omitted entirely.
    repeated DimensionElementFieldColumn fields = 1;

    // 1-based list of indices for which the fields are absent in all dimension elements encoded here.
    repeated int32 absentFieldColumnIndices = 4;

    // 1-based list of indices of elements that are absent. This are the indices for which no element is present, and
    // thus in all field columns the value is absent. A decoder can treat this field as if it is unioned into the
    // `absentValueIndices` list in each DimensionElementFieldColumn in `fields`.
    repeated int32 absentElementIndices = 5;

    // Set to true if there are no elements whatsoever in this DimensionElements. In that case `fields`,
    // `absentFieldColumnIndices` and `absentElementsIndices` will all be empty.
    bool empty = 6;

    // `scope` is only used when this message is embedded in a packedCell. If this message is embedded in the Footer,
    // it is logically just a list of dimension elements into which the `dimensionIndexes` point.
    //
    // A DimensionElements in a PackedCell can store elements in three modes. In the below description, 'current
    // dimension' refers to the (inline) dimension represented by this DimensionElements. The modes are:
    // 1) one element for the entire packed cell. All values in this packed cell have the same element for the
    //    current dimension.
    // 2) one element for each element of the packed dimension (the number of elements in this DimensionElements
    //    equals the number of elements in the packed dimension). If there are multiple samples for a packed dimension
    //    element they have the same element for the current dimension.
    // 3) one element for each sample/value in the PackedCell. The number of elements in this DimensionElements
    //    equals the number of values (including nulls) in the packed cell.
    oneof scope {
        // if neither is set we are in mode 2 (expected to be the most common)

        // if perSample is set we are in mode 3, there is an individual element for each observation
        bool perSample = 2;

        // if perPackedCell is set we are in mode 1. This DimensionElements contains only a single element, which
        // applies to all observations in the packedCell
        bool perPackedCell = 7;
    }
}

message DimensionElementFieldColumn {
    // Values for one field of all dimension elements, e.g. values for the 'age' field of all the patients in intValue.
    repeated string stringValue = 1;  // only One of these must be set! 'oneof' doesn't work for repeated fields.
    repeated double doubleValue = 2;
    repeated sint64 intValue = 3;
    repeated int64 timestampValue = 4;

    repeated int32 absentValueIndices = 5;
}


// This message is a generic error message that can be sent in place of any of the other root messages.
// As long as the error field in all interchanged messages (Header, Cell, PackedCell, Footer, Error) has the same type
// and number, this message can be interchanged with the other root message types.
message Error {
    // see Header.error
    string error = 99;
}
