syntax = "proto2";
package v2;

option java_package = "org.transmartproject.rest.protobuf";
option java_outer_classname = "ObservationsProto";
// Style guide for this file: https://developers.google.com/protocol-buffers/docs/style

// A full hypercube is a series of messages, each prefixed by its length in the protobuf varint encoding. A hypercube
// starts with a header, then one or more observations or one or more packedObservations (depending on if there is a
// dimension marked 'packed'), and then one footer.

message Header { // header is sent without chunking in a one message
                 repeated DimensionDeclaration dimension_declarations = 1;
}


message DimensionDeclaration { // each dimension present in the output is declared with this message
                               required string name = 1;
                               optional bool isDense = 2; // if true, values of the observation can be packed along
                                                          // this dimension
                               repeated FieldDefinition fields = 3; // a.k.a dimension elements
                               optional bool inline = 4;  // if true the dimension elements will be stored in the
                                                          // observation cell instead of the footer
} //  TODO: packing along dense dimensions is not yet implemented

message FieldDefinition { // each field (dimension element) has its definition specifying type of its value
                          // Examples of this for the Patient dimension would be the fields of a Patient object, e.g.
                          // age, gender, race, etc.
                          enum ColumnType {
                              DOUBLE = 1;
                              STRING = 2;
                              INT = 3;
                          }

                          required string name = 1;
                          required ColumnType type = 2;
}



message Observation {
    // This list of dimensionIndexes has the same length as the number of dense dimensionDeclarations (excluding the
    // dimension along which observations are packed, if packing is used) and follows their
    // order. The value is the index into the dimElementField value. The index should be 1-based to reserve the 0 for
    // 'not present'.
    repeated DimensionCell dimensions = 1;
    // A single element for each inline dimension, in the order used in the header.
    repeated DimensionElements inline_dimensions = 2;
    oneof value {
        string stringValue = 3;
        double numericValue = 4;
    }

    // Set to true on the last observation, the last observation is followed by a footer.
    required bool last = 5 [default=false];
}

message DimensionCell {
    required int64 dimension_index = 1;
    required int64 value_index = 2; // index ref. to the footer array of dimensionElements
}

message Footer {
    repeated DimensionElements elements = 1;
}

message DimensionElements { // values associated with a dimension
                   map<string, DimensionElement> fields = 1; // name of the dimension element -> value
}

message DimensionElement {
    optional string stringValue = 1; // one, and only one of these fields can be filled
    optional double doubleValue = 2;
    optional int64 intValue = 3;
}
