buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "http://dl.bintray.com/grails/plugins" }
        maven { url "https://repo.transmartfoundation.org/content/repositories/public" }
        maven { url "https://repo.thehyve.nl/content/repositories/public" }

    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.8.2"
        classpath "org.grails.plugins:hibernate4:5.0.10"
    }
}

version "17.1"
group "transmartapp"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.transmartfoundation.org/content/repositories/public" }
    maven { url "https://repo.thehyve.nl/content/repositories/public" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

//noinspection GroovyAssignabilityCheck
dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile 'org.grails.plugins:spring-security-core:3.1.1'
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate4:5.0.10"
    compile "org.hibernate:hibernate-ehcache"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.8.2"
    //runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"


    runtime 'org.postgresql:postgresql:9.3-1100-jdbc4'
    runtime 'com.oracle:ojdbc7:12.1.0.1'

    runtime 'org.javassist:javassist:3.16.1-GA'

    compile "org.swinglabs:pdf-renderer:1.0.5"
    compile 'antlr:antlr:2.7.7'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile "org.apache.lucene:lucene-core:2.4.0"
    compile "org.apache.lucene:lucene-demos:2.4.0"
    compile "org.apache.lucene:lucene-highlighter:2.4.0"
    compile "org.apache.solr:solr-solrj:6.2.0"
    compile 'commons-net:commons-net:3.3' // used for ftp transfers
    compile 'org.apache.commons:commons-math:2.2' //>2MB lib briefly used in ChartController
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.1'
    compile 'org.rosuda:Rserve:1.7.3'
    compile 'com.google.guava:guava:14.0.1'
    //compile 'org.springframework.ldap:spring-ldap-core:2.1.0.RELEASE'
    compile 'org.springframework.security:spring-security-ldap:3.2.3.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '3.2.3.RELEASE'
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.11.RELEASE'
    compile group: 'log4j', name: 'apache-log4j-extras', version: '1.2.17'

    /* for GeneGo web services: */
    compile 'axis:axis:1.4'

    /* for SAML authentication */
    compile('org.springframework.security.extensions:spring-security-saml2-core:1.0.0.RELEASE')
    // spring security version should be in sync with that brought with
    // grails-spring-security-core
    runtime 'org.springframework.security:spring-security-config:3.2.3.RELEASE'


    testRuntime 'junit:junit:4.11'

    testRuntime 'org.hamcrest:hamcrest-core:1.3',
            'org.hamcrest:hamcrest-library:1.3'

    testRuntime 'org.gmock:gmock:0.9.0-r435-hyve2'
    // https://mvnrepository.com/artifact/jfree/jfreechart
    compile group: 'jfree', name: 'jfreechart', version: '1.0.12'
    // https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream
    compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.9'
    // https://mvnrepository.com/artifact/com.jcraft/jsch
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.53'

    compile project(':transmart-core-api')
    compile project(':transmart-core-db')
    compile project(':transmart-java')
    compile project(':search-domain')
    compile project(':biomart-domain')
    compile project(':Rmodules')
    compile project(':transmart-legacy-db')
    compile project(':folder-management-plugin')
    // https://mvnrepository.com/artifact/org.fusesource.jansi/jansi
    compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.8'
    // https://mvnrepository.com/artifact/jline/jline
    compile group: 'jline', name: 'jline', version: '2.12.1'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '4.3.5.Final'

    compile files('lib/GenePattern.jar')
    compile 'org.jfree:jfreesvg:3.1'
}


assets {
    minifyJs = true
    minifyCss = true
}

task installTransmartPlugins << {
/**
 * 	Explodes the plugins in the TranSMART plugin folder.
 */
    def grailsHome = ant.project.properties."environment.GRAILS_HOME"
    def basedir = System.getProperty("base.dir")
    def pluginFiles = "${basedir}/plugins/ext-2.2.zip"
    def jsDir = "${basedir}/web-app/js/plugin"
    def gspDir = "${basedir}/grails-app/views/plugin"
    def rDir = ""

//This is our plugin zip directory.
    def zipDir = new File("${basedir}/plugins/")

//For each of the zips in this directory, instruct ant to unzip the file and move the contents to the directory specified by their file extension.
    zipDir.eachFile { zipFile ->

        //If we find a file.
        if (zipFile.isFile()) {
            //Unzip file to a temp directory.
            ant.unzip(src: "${zipFile}", dest: "${basedir}/plugins/temp/")

            def fileDir = new File("${basedir}/plugins/temp/")

            fileDir.eachFile { file ->
                if (file.isFile()) {
                    if (file.name.contains(".gsp")) ant.move(file: "${file}", tofile: "${gspDir}/${file.name}")
                    if (file.name.contains(".js")) ant.move(file: "${file}", tofile: "${jsDir}/${file.name}")
                    if (file.name.contains(".r")) ant.move(file: "${rDir}", tofile: "${rDir}/${file.name}")
                }
            }

            //TODO: Delete temp directory?

        }
    }

}

